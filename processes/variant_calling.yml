# =============================
# Processors for variant calling
# =============================
#
# Processors for variant calling given an imput BAM file
---

- name: vc-samtools
  version: 1.0.5
  label: Variant calling (Samtools)
  type: data:variants:vcf
  category: analyses:variants
  persistence: CACHED
  description: >
    Samtools variant calling.
  input:
    - name: genome
      label: Reference genome
      type: data:genome:fasta
      required: true
    - name: mapping
      label: Mapped reads
      type: data:alignment:bam
      required: true
  output:
    - name: vcf
      label: Called variants
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: "Called variants ({{ mapping.output.bam.file|basename|default:'?' }})"
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ["variants", "VCF"]
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: "Samtools called variants from {{ mapping.output.bam.file|basename|default:'?' }}."
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      echo "uncompressing genome, indexing"
      GENOME_NAME=`basename '{{ genome.output.fasta.file }}' .fasta.gz`
      cp {{ genome.output.fasta.file }} "${GENOME_NAME}.fasta.gz"
      echo "{\"proc.progress\":0.05,\"proc.rc\":$?}"

      {{ proc.slugs_path }}/samtools-0.1.19/samtools faidx "${GENOME_NAME}.fasta.gz"
      echo "{\"proc.progress\":0.1,\"proc.rc\":$?}"

      echo "bam files processing"
      BAM_FILE=`basename '{{ mapping.output.bam.file }}' .bam`
      echo "{\"proc.progress\":0.3,\"proc.rc\":$?}"

      echo "removing duplicates"
      {{ proc.slugs_path }}/samtools-0.1.19/samtools rmdup "{{ mapping.output.bam.file }}" "${BAM_FILE}_nodupli.bam"
      echo "{\"proc.progress\":0.4,\"proc.rc\":$?}"

      echo "creating VCF file"
      {{ proc.slugs_path }}/samtools-0.1.19/samtools mpileup -u -f "${GENOME_NAME}.fasta.gz" "${BAM_FILE}_nodupli.bam" > "${BAM_FILE}_raw.bcf";
      echo "{\"proc.progress\":0.5,\"proc.rc\":$?}"

      echo "calling variants"
      {{ proc.slugs_path }}/samtools-0.1.19/bcftools view -bvcg "${BAM_FILE}_raw.bcf" > "${BAM_FILE}_calls.bcf";
      echo "{\"proc.progress\":0.7,\"proc.rc\":$?}"

      echo "filtering variants"
      {{ proc.slugs_path }}/samtools-0.1.19/bcftools view "${BAM_FILE}_calls.bcf" | {{ proc.slugs_path }}/samtools-0.1.19/vcfutils.pl varFilter - > "${BAM_FILE}_samtoolscalls.vcf"
      echo "{\"proc.progress\":0.8,\"proc.rc\":$?}"

      {{proc.slugs_path}}/tabix-0.2.6/bgzip -c "${BAM_FILE}_samtoolscalls.vcf" > "${BAM_FILE}_samtoolscalls.vcf.bgz"
      echo "{\"proc.progress\":0.9,\"proc.rc\":$?}"

      {{proc.slugs_path}}/tabix-0.2.6/tabix -p vcf "${BAM_FILE}_samtoolscalls.vcf.bgz"
      echo "{\"proc.progress\":0.95,\"proc.rc\":$?}"

      echo "{\"proc.progress\":1,\"vcf\":{\"file\": \"${BAM_FILE}_samtoolscalls.vcf\",\"refs\":[\"${BAM_FILE}_samtoolscalls.vcf.bgz\",\"${BAM_FILE}_samtoolscalls.vcf.bgz.tbi\"]}}"

- name: vc-gatk
  version: 1.0.10
  label: Variant calling (GATK)
  type: data:variants:vcf:gatk
  category: analyses:variants
  persistence: CACHED
  description: >
    GATK varint calling. Note: Usage of Genome Analysis Toolkit requires a licence.
  input:
    - name: genome
      label: Reference genome
      type: data:genome:fasta
      required: true
    - name: mapping
      label: Mapped reads
      type: data:alignment:bam
      required: true
    - name: br_and_ind_ra
      label: Do variant base recalibration and indel realignment
      type: basic:boolean
      default: true
    - name: collectinsertsizemetrics
      label: Collect insert size metrics
      type: basic:boolean
      default: false
      description: >
        Writes a file containing metrics about the statistical distribution of insert size (excluding duplicates) and generates a Histogram plot.
    - name: known_sites
      label: Known sites
      type: data:variants:vcf
      required: false
    - name: known_indels
      label: Known indels
      type: list:data:variants:vcf
      required: false
    - name: reads_info
      label: Reads information
      group:
      - name: ID
        label: Read group identifier
        type: basic:string
        required: true
        default: x
      - name: SM
        label: Sample
        type: basic:string
        required: true
        default: x
        description: >
          Sample. Use pool name where a pool is being sequenced.
      - name: PL
        label: Platform/technology
        type: basic:string
        required: true
        description: >
          Platform/technology used to produce the reads.
        choices:
          - label: Capillary
            value: Capillary
          - label: Ls454
            value: Ls454
          - label: Illumina
            value: Illumina
          - label: SOLiD
            value: SOLiD
          - label: Helicos
            value: Helicos
          - label: IonTorrent
            value: IonTorrent
          - label: Pacbio
            value: Pacbio
        default: Illumina
        required: true
      - name: LB
        label: Library
        type: basic:string
        default: x
        required: true
      - name: PU
        label: Platform unit
        type: basic:string
        description: >
          Platform unit (e.g. flowcell-barcode.lane for Illumina or slide for SOLiD). Unique identifier.
        default: x
        required: true
      - name: CN
        label: Sequencing center
        type: basic:string
        description: >
          Name of sequencing center producing the read.
        default: x
        required: true
      - name: DT
        label: Date
        type: basic:date
        description: >
          Date the run was produced.
        required: true
    - name: Varc_param
      label: Parameters of HaplotypeCaller
      group:
      - name: stand_emit_conf
        label: Emission confidence threshold
        type: basic:integer
        required: true
        default: 10
        description: >
           The minimum confidence threshold (phred-scaled) at which the program should emit sites that appear to be possibly variant.
      - name: stand_call_conf
        label: Calling confidence threshold
        type: basic:integer
        required: true
        default: 30
        description: >
          the minimum confidence threshold (phred-scaled) at which the program should emit variant sites as called. If a site's associated genotype has a confidence score lower than the calling threshold, the program will emit the site as filtered and will annotate it as LowQual. This threshold separates high confidence calls from low confidence calls.
  output:
    - name: vcf
      label: Called variants file
      type: basic:file
    - name: ism
      label: Insert size metrics
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: "Called variants ({{ mapping.output.bam.file|basename|default:'?' }})"
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ["variants", "VCF"]
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: "GATK called variants from {{ mapping.output.bam.file|basename|default:'?' }}."
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      echo "uncompressing genome, indexing"
      GENOME_NAME=`basename '{{ genome.output.fasta.file }}' .fasta.gz`
      gzip -cd {{ genome.output.fasta.file }} > "${GENOME_NAME}.fasta"
      {{ proc.slugs_path }}/samtools-0.1.19/samtools faidx "${GENOME_NAME}.fasta"
      java -jar "{{ proc.slugs_path }}/picard-tools-1.118/CreateSequenceDictionary.jar" R="${GENOME_NAME}.fasta" O="${GENOME_NAME}.dict"
      echo "{\"proc.progress\":0.05,\"proc.rc\":$?}"

      echo "bam files processing"
      BAM_FILE=`basename '{{ mapping.output.bam.file }}' .bam`


      echo "sorting, marking duplicates, indexing"
      java -Xmx4g -jar {{ proc.slugs_path }}/picard-tools-1.118/MarkDuplicates.jar I="{{ mapping.output.bam.file }}" O="${BAM_FILE}_inds.bam" METRICS_FILE=junk.txt VALIDATION_STRINGENCY=LENIENT
      echo "{\"proc.progress\":0.1,\"proc.rc\":$?}"
      java -Xmx4g -jar {{ proc.slugs_path }}/picard-tools-1.118/AddOrReplaceReadGroups.jar I="${BAM_FILE}_inds.bam" O="${BAM_FILE}_indh.bam" RGID={{reads_info.ID}} RGLB={{reads_info.LB}} RGPL={{reads_info.PL}} RGPU={{reads_info.PU}} RGSM={{reads_info.SM}} RGCN={{reads_info.CN}} RGDT={{reads_info.DT}}
      echo "{\"proc.progress\":0.15,\"proc.rc\":$?}"
      {{ proc.slugs_path }}/samtools-0.1.19/samtools index "${BAM_FILE}_indh.bam"
      echo "{\"proc.progress\":0.2,\"proc.rc\":$?}"

      {% if collectinsertsizemetrics %}
        java -Xmx4g -jar {{ proc.slugs_path }}/picard-tools-1.118/CollectInsertSizeMetrics.jar I="${BAM_FILE}_indh.bam" O="${BAM_FILE}".CollectInsertSizeMetrics H="${BAM_FILE}".CollectIsertSizeMetrics.pdf VALIDATION_STRINGENCY=LENIENT
        echo "{\"proc.progress\":0.25,\"proc.rc\":$?,\"ism\":{\"file\":\"${BAM_FILE}.CollectIsertSizeMetrics.pdf\"}}"
      {% endif %}

      {% if br_and_ind_ra %}
        echo "indel realignment"
        echo "su $(whoami) -s /bin/bash -c \"java -Xmx4g -jar {{ proc.slugs_path }}/GATK-3.2.2/GenomeAnalysisTK.jar -T RealignerTargetCreator -I '${BAM_FILE}_indh.bam' -R '${GENOME_NAME}.fasta' -o indel_interval.bed {% if known_indels %} -known {% for indelx in known_indels %}{{ indelx.output.vcf.file }} {% endfor %}{% endif %}\"" > temp.sh
        sudo unshare -n bash temp.sh
        echo "{\"proc.progress\":0.3,\"proc.rc\":$?}"
        echo "su $(whoami) -s /bin/bash -c \"java -Xmx4g -jar {{ proc.slugs_path }}/GATK-3.2.2/GenomeAnalysisTK.jar -T IndelRealigner -I '${BAM_FILE}_indh.bam' -R '${GENOME_NAME}.fasta' -o '${BAM_FILE}_noncal.bam' -targetIntervals indel_interval.bed -compress 0\"" > temp.sh
        sudo unshare -n bash temp.sh
        echo "{\"proc.progress\":0.35,\"proc.rc\":$?}"

        echo "Base recalibration"
        echo "su $(whoami) -s /bin/bash -c \"java -Xmx4g -jar {{ proc.slugs_path }}/GATK-3.2.2/GenomeAnalysisTK.jar -T BaseRecalibrator -I '${BAM_FILE}_noncal.bam'  -R '${GENOME_NAME}.fasta' -o recal_data.table -knownSites '{{ known_sites.output.vcf.file }}'\"" > temp.sh
        sudo unshare -n bash temp.sh
        echo "{\"proc.progress\":0.4,\"proc.rc\":$?}"
        echo "su $(whoami) -s /bin/bash -c \"java -Xmx4g -jar {{ proc.slugs_path }}/GATK-3.2.2/GenomeAnalysisTK.jar -T PrintReads -I '${BAM_FILE}_noncal.bam' -R '${GENOME_NAME}.fasta' -o '${BAM_FILE}_final.bam' -BQSR recal_data.table\"" > temp.sh
        sudo unshare -n bash temp.sh
        echo "{\"proc.progress\":0.45,\"proc.rc\":$?}"
      {% else %}
        mv "${BAM_FILE}_indh.bam" "${BAM_FILE}_final.bam"
      {% endif %}

      {{ proc.slugs_path }}/samtools-0.1.19/samtools index "${BAM_FILE}_final.bam"

      echo "variant calling"
      echo "su $(whoami) -s /bin/bash -c \"java -Xmx4g -jar {{ proc.slugs_path }}/GATK-3.2.2/GenomeAnalysisTK.jar -T UnifiedGenotyper -I '${BAM_FILE}_final.bam' -R '${GENOME_NAME}.fasta' -o '${BAM_FILE}_GATKvariants.vcf' {% if known_sites %} --dbsnp {{ known_sites.output.vcf.file }} {% endif %} -stand_call_conf {{ Varc_param.stand_call_conf }} -stand_emit_conf {{ Varc_param.stand_emit_conf }} -rf ReassignOneMappingQuality -RMQF 255 -RMQT 60\"" > temp.sh
      sudo unshare -n bash temp.sh
      echo "{\"proc.progress\":0.8,\"proc.rc\":$?}"

      #echo "hard filtering"
      #java -Xmx4g -jar {{ proc.slugs_path }}/GATK-3.2.2/GenomeAnalysisTK.jar -V "${BAM_FILE}_haplotype.vcf" -o "${BAM_FILE}_filtered.vcf" -T VariantFiltration -R "${GENOME_NAME}.fasta" --filterName GATKstandard --filterExpression "QUAL < 30 || QD < 5.0"
      #{{ proc.slugs_path }}/vcftools_0.1.12a/bin/vcftools --vcf "${BAM_FILE}_filtered.vcr"
      #mv "${BAM_FILE}_filtered.vcr" "${BAM_FILE}_GATKvariants.vcf"

      {{proc.slugs_path}}/tabix-0.2.6/bgzip -c "${BAM_FILE}_GATKvariants.vcf" > "${BAM_FILE}_GATKvariants.vcf.bgz"
      echo "{\"proc.progress\":0.9,\"proc.rc\":$?}"
      {{proc.slugs_path}}/tabix-0.2.6/tabix -p vcf "${BAM_FILE}_GATKvariants.vcf.bgz"
      echo "{\"proc.progress\":0.95,\"proc.rc\":$?}"

      echo "{\"proc.progress\":1,\"vcf\":{\"file\": \"${BAM_FILE}_GATKvariants.vcf\", \"refs\":[\"${BAM_FILE}_GATKvariants.vcf.bgz\",\"${BAM_FILE}_GATKvariants.vcf.bgz.tbi\"] }}"


- name: vc-gatk-joint
  version: 1.0.0
  label: Joint Variant calling (GATK)
  type: data:variants:vcf:jointgatk
  category: analyses:variants
  persistence: CACHED
  description: >
    GATK varint calling using multiple BAM input files. Note: Usage of Genome Analysis Toolkit requires a licence.
  input:
    - name: genome
      label: Reference genome
      type: data:genome:fasta
      required: true
    - name: mapping
      label: Mapped reads
      type: list:data:alignment:bam
      required: true
    - name: br_and_ind_ra
      label: Do variant base recalibration and indel realignment
      type: basic:boolean
      default: false
    - name: dbsnp
      label: Use dbSNP file
      type: basic:boolean
      default: false
      description: >
        rsIDs from this file are used to populate the ID column of the output. Also, the DB INFO flag will be set when appropriate. dbSNP is not used in any way for the calculations themselves.
    - name: known_sites
      label: Known sites (dbSNP)
      type: data:variants:vcf
      required: false
      hidden: "br_and_ind_ra === false && dbsnp === false"
    - name: known_indels
      label: Known indels
      type: list:data:variants:vcf
      required: false
      hidden: "br_and_ind_ra === false"
    - name: reads_info
      label: Reads information
      group:
      - name: PL
        label: Platform/technology
        type: basic:string
        required: true
        description: >
          Platform/technology used to produce the reads.
        choices:
          - label: Capillary
            value: Capillary
          - label: Ls454
            value: Ls454
          - label: Illumina
            value: Illumina
          - label: SOLiD
            value: SOLiD
          - label: Helicos
            value: Helicos
          - label: IonTorrent
            value: IonTorrent
          - label: Pacbio
            value: Pacbio
        default: Illumina
      - name: LB
        label: Library
        type: basic:string
        default: x
        required: true
      - name: PU
        label: Platform unit
        type: basic:string
        description: >
          Platform unit (e.g. flowcell-barcode.lane for Illumina or slide for SOLiD). Unique identifier.
        default: x
        required: true
      - name: CN
        label: Sequencing center
        type: basic:string
        description: >
          Name of sequencing center producing the read.
        default: x
        required: true
      - name: DT
        label: Date
        type: basic:date
        description: >
          Date the run was produced.
        required: true
    - name: Varc_param
      label: Parameters of UnifiedGenotyper
      group:
        - name: stand_emit_conf
          label: Emission confidence threshold
          type: basic:integer
          required: true
          default: 10
          description: >
             The minimum confidence threshold (phred-scaled) at which the program should emit sites that appear to be possibly variant.
        - name: stand_call_conf
          label: Calling confidence threshold
          type: basic:integer
          required: true
          default: 30
          description: >
            The minimum confidence threshold (phred-scaled) at which the program should emit variant sites as called. If a site's associated genotype has a confidence score lower than the calling threshold, the program will emit the site as filtered and will annotate it as LowQual. This threshold separates high confidence calls from low confidence calls.
        - name: ploidy
          label: Sample ploidy
          type: basic:integer
          default: 2
          description: >
            Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy).
        - name: glm
          label: Genotype likelihoods model
          type: basic:string
          default: SNP
          description: >
            Genotype likelihoods calculation model to employ -- SNP is the default option, while INDEL is also available for calling indels and BOTH is available for calling both together.
          choices:
            - label: SNP
              value: SNP
            - label: INDEL
              value: INDEL
            - label: BOTH
              value: BOTH
        - name: intervals
          label: Intervals
          type: list:basic:string
          required: false
          description: >
            Use this option to perform the analysis over only part of the genome. This argument can be specified multiple times. You can use samtools-style intervals (e.g. -L chr1 or -L chr1:100-200).
  output:
    - name: vcf
      label: Called variants file
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: "GATK called variants"
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ["variants", "VCF"]
      placeholder: new tag
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      gen-require common
      gen-require samtools-0.1.19
      gen-require vcftools_0.1.12a/bin
      gen-require tabix-0.2.6

      {% if br_and_ind_ra and not known_sites and not known_indels %}
        gen-error "Variant base recalibration and indel realignment step requires known sites/indels information in the form of user provided VCF files."
      {% endif %}

      {% for bam in mapping %}
        BAM_FILE=`basename '{{ bam.bam.file }}'`
        NAMES=$NAMES"${BAM_FILE},"
      {% endfor %}

      unique_sample_names.py ${NAMES}

      echo "uncompressing genome, indexing"
      GENOME_NAME=`basename '{{ genome.fasta.file }}' .fasta.gz`
      gzip -cd {{ genome.fasta.file }} > "${GENOME_NAME}.fasta"
      samtools faidx "${GENOME_NAME}.fasta"
      gen-checkrc

      java -jar "{{ proc.slugs_path }}/picard-tools-1.118/CreateSequenceDictionary.jar" R="${GENOME_NAME}.fasta" O="${GENOME_NAME}.dict"
      gen-checkrc
      gen-progress 0.05

      COUNTER=1

      {% for bam in mapping %}
        echo "bam files processing"
        BAM_FILE=`basename '{{ bam.bam.file }}' .bam`

        echo "sorting, marking duplicates, indexing"
        java -Xmx4g -jar {{ proc.slugs_path }}/picard-tools-1.118/MarkDuplicates.jar I="{{ bam.bam.file }}" O="${BAM_FILE}_inds.bam" METRICS_FILE=junk.txt VALIDATION_STRINGENCY=LENIENT
        gen-checkrc

        java -Xmx4g -jar {{ proc.slugs_path }}/picard-tools-1.118/AddOrReplaceReadGroups.jar I="${BAM_FILE}_inds.bam" O="${BAM_FILE}_indh.bam" RGID=ReadGroup_${COUNTER} RGLB={{reads_info.LB}} RGPL={{reads_info.PL}} RGPU={{reads_info.PU}} RGSM=${BAM_FILE} RGCN={{reads_info.CN}} RGDT={{reads_info.DT}}
        gen-checkrc

        samtools index "${BAM_FILE}_indh.bam"
        gen-checkrc
        COUNTER=COUNTER+1
      {% endfor %}

      gen-progress 0.2

      {% if br_and_ind_ra %}
        {% for bam in mapping %}
          BAM_FILE=`basename '{{ bam.bam.file }}' .bam`
          echo "indel realignment"
          echo "su $(whoami) -s /bin/bash -c \"java -Xmx4g -jar {{ proc.slugs_path }}/GATK-3.2.2/GenomeAnalysisTK.jar -T RealignerTargetCreator -I '${BAM_FILE}_indh.bam' -R '${GENOME_NAME}.fasta' -o indel_interval.bed {% if known_indels %} -known {% for indelx in known_indels %}{{ indelx.output.vcf.file }} {% endfor %}{% endif %}\"" > temp.sh
          sudo unshare -n bash temp.sh
          gen-checkrc
          
          echo "su $(whoami) -s /bin/bash -c \"java -Xmx4g -jar {{ proc.slugs_path }}/GATK-3.2.2/GenomeAnalysisTK.jar -T IndelRealigner -I '${BAM_FILE}_indh.bam' -R '${GENOME_NAME}.fasta' -o '${BAM_FILE}_noncal.bam' -targetIntervals indel_interval.bed -compress 0\"" > temp.sh
          sudo unshare -n bash temp.sh
          gen-checkrc

          echo "Base recalibration"
          echo "su $(whoami) -s /bin/bash -c \"java -Xmx4g -jar {{ proc.slugs_path }}/GATK-3.2.2/GenomeAnalysisTK.jar -T BaseRecalibrator -I '${BAM_FILE}_noncal.bam'  -R '${GENOME_NAME}.fasta' -o recal_data.table -knownSites '{{ known_sites.output.vcf.file }}'\"" > temp.sh
          sudo unshare -n bash temp.sh
          gen-checkrc
          
          echo "su $(whoami) -s /bin/bash -c \"java -Xmx4g -jar {{ proc.slugs_path }}/GATK-3.2.2/GenomeAnalysisTK.jar -T PrintReads -I '${BAM_FILE}_noncal.bam' -R '${GENOME_NAME}.fasta' -o '${BAM_FILE}_final.bam' -BQSR recal_data.table\"" > temp.sh
          sudo unshare -n bash temp.sh
          gen-checkrc
        {% endfor %}
        gen-progress 0.40      
      {% else %}
        {% for bam in mapping %}
          BAM_FILE=`basename '{{ bam.bam.file }}' .bam`
          mv "${BAM_FILE}_indh.bam" "${BAM_FILE}_final.bam"
        {% endfor %}
      {% endif %}

      {% for bam in mapping %}
        BAM_FILE=`basename '{{ bam.bam.file }}' .bam`
        samtools index "${BAM_FILE}_final.bam"
        SAMPLES=$SAMPLES"-I ${BAM_FILE}_final.bam "
      {% endfor %}

      echo "variant calling"
      echo "su $(whoami) -s /bin/bash -c \"java -Xmx4g -jar {{ proc.slugs_path }}/GATK-3.2.2/GenomeAnalysisTK.jar -T UnifiedGenotyper ${SAMPLES} -R '${GENOME_NAME}.fasta' -o 'GATKvariants_raw.vcf' {% if dbsnp and known_sites %} --dbsnp {{ known_sites.output.vcf.file }} {% endif %} -ploidy {{ Varc_param.ploidy }} -glm {{ Varc_param.glm }} -stand_call_conf {{ Varc_param.stand_call_conf }} -stand_emit_conf {{ Varc_param.stand_emit_conf }} {% if Varc_param.intervals %} {% for l in Varc_param.intervals %} -L {{l}} {% endfor %} {% endif %} -rf ReassignOneMappingQuality -RMQF 255 -RMQT 60\"" > temp.sh
      sudo unshare -n bash temp.sh
      gen-checkrc
      gen-progress 0.8

      bgzip -c "GATKvariants_raw.vcf" > "GATKvariants_raw.vcf.bgz"
      gen-checkrc
      gen-progress 0.9
      
      tabix -p vcf "GATKvariants_raw.vcf.bgz"
      gen-checkrc
      gen-progress 0.95

      gen-save-file vcf GATKvariants_raw.vcf GATKvariants_raw.vcf.bgz GATKvariants_raw.vcf.bgz.tbi


- name: vcf-annotation
  version: 1.0.10
  label: Variant calling annotation (SNPdat)
  type: data:variants:annotation
  category: analyses:variants
  persistence: CACHED
  description: >
    variant calling annotation
  input:
    - name: variants
      label: Variants
      type: data:variants:vcf
      required: true
    - name: genome
      label: Reference genome
      type: data:genome:fasta
      required: true
    - name: gtf
      label: Genome annotation (GTF)
      type: data:annotation:gtf
      required: true
    - name: filtration
      label: Filtration parameters
      group:
      - name: rd
        label: Filter by read depth (less than)
        type: basic:integer
        default: 10
      - name: af
        required: true
        label: Filter by allele frequency (less than)
        type: basic:decimal
        default: 0.2
  output:
    - name: summary
      label: Annotation summary
      type: basic:file
    - name: annotation
      label: Annotation file
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: "Variants annotation ({{ variants.output.vcf.file|basename|default:'?' }})"
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ["variants", "annotation"]
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: "Description of variants annotation ({{ variants.output.vcf.file|basename|default:'?' }})."
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      VARIANTS=`basename '{{variants.output.vcf.file}}' .vcf`
      SUMMARY="${VARIANTS}_summary_annotation.txt"
      OUTPUT="${VARIANTS}_annotationX.tsv"

      GENOME_NAME=`basename '{{ genome.output.fasta.file }}' .fasta.gz`
      gzip -cd {{ genome.output.fasta.file }} > "${GENOME_NAME}.fasta"
      echo "{\"proc.progress\":0.05,\"proc.rc\":$?}"

      # indexing
      {{ proc.slugs_path }}/samtools-0.1.19/samtools faidx "${GENOME_NAME}.fasta"
      echo "{\"proc.progress\":0.1,\"proc.rc\":$?}"
      java -jar "{{ proc.slugs_path }}/picard-tools-1.118/CreateSequenceDictionary.jar" R="${GENOME_NAME}.fasta" O="${GENOME_NAME}.dict"
      echo "{\"proc.progress\":0.15,\"proc.rc\":$?}"

      # filtering
      echo "su $(whoami) -s /bin/bash -c \"java -jar {{ proc.slugs_path }}/GATK-3.2.2/GenomeAnalysisTK.jar -T VariantFiltration -V '{{variants.output.vcf.file}}' -o '${VARIANTS}_filtered.vcf' -R '${GENOME_NAME}.fasta' --filterName DepthFilter --filterExpression 'DP < {{filtration.rd}} || AF < {{filtration.af}}'\"" > temp.sh
      sudo unshare -n bash temp.sh
      echo "{\"proc.progress\":0.2,\"proc.rc\":$?}"
      echo "su $(whoami) -s /bin/bash -c \"java -jar {{ proc.slugs_path }}/GATK-3.2.2/GenomeAnalysisTK.jar -T SelectVariants --variant '${VARIANTS}_filtered.vcf' -o '${VARIANTS}_selected.vcf' -R '${GENOME_NAME}.fasta' -ef\"" > temp.sh
      sudo unshare -n bash temp.sh
      echo "{\"proc.progress\":0.25,\"proc.rc\":$?}"

      # annotation
      perl "{{ proc.slugs_path }}/SNPdat-1.0.5/SNPdat_v1.0.5.pl" -i "${VARIANTS}_selected.vcf" -g "{{gtf.output.gtf.file}}" -f "${GENOME_NAME}.fasta" -o "${OUTPUT}" -s "${SUMMARY}"
      echo "{\"proc.progress\":0.8,\"proc.rc\":$?}"
      python -u "{{ proc.slugs_path }}/gencloud-20131109/VCF_ad_extract.py" "${VARIANTS}_selected.vcf" "${OUTPUT}" > "ad_column.txt"
      echo "{\"proc.progress\":0.9,\"proc.rc\":$?}"
      pr -mts "${OUTPUT}" "ad_column.txt" > "${VARIANTS}_annotation.tsv"
      echo "{\"proc.progress\":1,\"proc.rc\":$?,\"summary\":{\"file\": \"${SUMMARY}\"}, \"annotation\":{\"file\":\"${VARIANTS}_annotation.tsv\"}}"
