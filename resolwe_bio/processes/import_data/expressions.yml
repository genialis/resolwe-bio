# ==================
# Import Expressions
# ==================
---

- slug: upload-expression
  name: Expression
  data_name: '{{ exp.file|default:"?" }}'
  version: 1.0.8
  type: data:expression
  flow_collection: sample
  category: upload
  persistence: RAW
  description: >
        Upload expression data. Please provide raw expression data (read counts) and/or normalized expression data together with the associated data normalization type.
  input:
    - name: rc
      label: Read counts (raw expression)
      type: basic:file
      description: >
        Reads mapped to genomic features (raw count data). Supported extensions: .txt.gz (preferred), .tab.* or .txt.*
      required: false
      validate_regex: '\.(txt|tab|gz)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
    - name: exp
      label: Normalized expression
      type: basic:file
      description: >
        Normalized expression data. Supported extensions: .tab.gz (preferred) or .tab.*
      required: false
      validate_regex: '\.(tab|gz)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
    - name: exp_type
      label: Normalization type
      type: basic:string
      description: >
        Normalization type
      required: false
  output:
    - name: exp
      label: Normalized expression
      type: basic:file
      description: Normalized expression
    - name: rc
      label: Read counts
      type: basic:file
      required: false
      description: Reads mapped to genomic features.
    - name: exp_json
      label: Expression (json)
      type: basic:json
    - name: exp_type
      label: Expression type
      type: basic:string
  run:
    runtime: polyglot
    bash: |
      {% if not exp and not rc %}
        re-error "Please provide raw or/and normalized expression files."

      {% elif exp and not exp_type %}
        re-error "Please provide normalization type together with normalized expressions."

      {% elif not exp and exp_type and rc %}
        re-error "Please provide raw or/and normalized expression files."

      {% elif rc and not exp and not exp_type %}
        re-import "{{ rc.file_temp|default:rc.file }}" "{{ rc.file }}" "txt|tab|gz" "tab" 0.1 compress
        EXP_TYPE="RC"
        re-save exp_type ${EXP_TYPE}
        re-save-file exp ${NAME}.tab.gz
        re-save-file rc ${NAME}.tab.gz
        expression2storage.py "${NAME}.tab.gz"
        re-checkrc

      {% elif exp and exp_type and not rc %}
        re-import "{{ exp.file_temp|default:exp.file }}" "{{ exp.file }}" "tab|gz" "tab" 0.1 compress
        EXP_NAME=${NAME}
        EXP_TYPE="{{exp_type}}"
        re-save exp_type ${EXP_TYPE}
        re-save-file exp ${EXP_NAME}.tab.gz
        expression2storage.py "${NAME}.tab.gz"
        re-checkrc

      {% else %}
        re-import "{{ rc.file_temp|default:rc.file }}" "{{ rc.file }}" "txt|tab|gz" "tab" 0.5 compress
        RC_NAME=${NAME}
        re-import "{{ exp.file_temp|default:exp.file }}" "{{ exp.file }}" "tab|gz" "tab" 0.9 compress
        EXP_NAME=${NAME}
        EXP_TYPE="{{exp_type}}"
        re-save exp_type ${EXP_TYPE}
        re-save-file exp ${EXP_NAME}.tab.gz
        re-save-file rc ${RC_NAME}.tab.gz
        expression2storage.py "${EXP_NAME}.tab.gz"
        re-checkrc
      {% endif %}


- slug: upload-expression-cuffnorm
  name: Expression (Cuffnorm)
  data_name: '{{ exp.file|default:"?" }}'
  version: 1.0.2
  type: data:expression
  category: upload
  persistence: RAW
  flow_collection: sample
  description: >
        Save per-sample expression data from Cuffnorm results.
  input:
    - name: exp
      label: Normalized expression
      type: basic:file
    - name: cxb
      label: Cuffquant analysis
      type: data:cufflinks:cuffquant
      description: >
        Cuffquant analysis.
    - name: exp_type
      label: Normalization type
      type: basic:string
      default: 'Cuffnorm'
  output:
    - name: exp
      label: Normalized expression
      type: basic:file
      description: Normalized expression
    - name: rc
      label: Read counts
      type: basic:file
      description: Reads mapped to genomic features.
      required: false
    - name: exp_json
      label: Expression (json)
      type: basic:json
    - name: exp_type
      label: Expression type
      type: basic:string
  run:
    runtime: polyglot
    bash: |
      {% if exp and not exp_type %}
        re-error "Please provide normalization type together with normalized expressions."

      {% elif exp and exp_type and cxb %}
        re-import "{{ exp.file_temp|default:exp.file }}" "{{ exp.file }}" "tab|gz" "tab" 0.1 compress
        EXP_NAME=${NAME}
        EXP_TYPE="{{exp_type}}"
        re-save exp_type ${EXP_TYPE}
        re-save-file exp ${EXP_NAME}.tab.gz
        expression2storage.py "${NAME}.tab.gz"
        re-checkrc

      {% endif %}
