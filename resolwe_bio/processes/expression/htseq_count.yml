# ========================
# Expression - HTSeq-count
# ========================
---

- slug: htseq-count
  name: HTSeq-count-normalized
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/rnaseq:1.2.0
  data_name: "{{ alignments.bam.file|basename|default('?') }} ({{ (alignments|sample_name) }})"
  version: 1.2.1
  type: data:expression:htseq:normalized
  category: analyses
  flow_collection: sample
  persistence: CACHED
  description: >
    Count the number of reads that map to a genomic feature (e.g. gene)
  input:
    - name: alignments
      label: Aligned reads
      type: data:alignment:bam
    - name: gff
      label: Annotation (GFF)
      type: data:annotation:gtf
    - name: mode
      label: Mode
      type: basic:string
      description: >
        Mode to handle reads overlapping more than one feature. Possible values for <mode> are union, intersection-strict and intersection-nonempty
      default: union
      choices:
        - label: union
          value: union
        - label: intersection-strict
          value: intersection-strict
        - label: intersection-nonempty
          value: intersection-nonempty
    - name: stranded
      label: Is data from a strand specific assay?
      type: basic:string
      description: >
        For stranded=no, a read is considered overlapping with a feature regardless of whether it is mapped to the same or the opposite strand as the feature. For stranded=yes and single-end reads, the read has to be mapped to the same strand as the feature. For paired-end reads, the first read has to be on the same strand and the second read on the opposite strand. For stranded=reverse, these rules are reversed
      default: "yes"
      choices:
        - label: "yes"
          value: "yes"
        - label: "no"
          value: "no"
        - label: reverse
          value: reverse
    - name: feature_class
      label: Feature class
      type: basic:string
      default: exon
      description: >
        Feature class (3rd column in GFF file) to be used. All other features will be ignored.
    - name: id_attribute
      label: ID attribute
      type: basic:string
      default: gene_id
      description: >
        GFF attribute to be used as feature ID. Several GFF lines with the same feature ID will be considered as parts of the same feature. The feature ID is used to identity the counts in the output table.
    - name: feature_type
      label: Feature type
      type: basic:string
      default: gene
      choices:
        - label: gene
          value: gene
        - label: transcript
          value: transcript
      description: >
        The type of feature the quantification program summarizes over (e.g. gene or transcript-level analysis).
    - name: name_ordered
      label: Use name-ordered BAM file for counting reads
      type: basic:boolean
      default: false
      required: false
      description: >
        Use name-sorted BAM file for reads quantification. Improves compatibility with larger BAM files, but requires more computational time.
  output:
    - name: htseq_output
      label: HTseq-count output
      type: basic:file
    - name: rc
      label: Read counts
      type: basic:file
    - name: fpkm
      label: FPKM
      type: basic:file
    - name: exp
      label: TPM (Transcripts Per Million)
      type: basic:file
    - name: exp_json
      label: TPM (json)
      type: basic:json
    - name: exp_type
      label: Expression Type (default output)
      type: basic:string
    - name: source
      label: Gene ID database
      type: basic:string
    - name: species
      label: Species
      type: basic:string
    - name: build
      label: Build
      type: basic:string
    - name: feature_type
      label: Feature type
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      NAME=`basename {{ alignments.bam.file }} .bam`
      re-progress 0.1

      {% if name_ordered %}
        if samtools view -H {{ alignments.bam.file }} | grep SO:queryname; then
          htseq-count \
            --format=bam \
            --order=name \
            --stranded={{ stranded }} \
            --mode={{mode}} \
            --type={{ feature_class }} \
            --idattr={{ id_attribute }} {{ alignments.bam.file }} {{ gff.annot.file }} \
            > "HTseq_rc.txt"
        else
          echo "Name sorting aligned reads:"
          samtools sort -n -o "${NAME}_name_sorted.bam" {{ alignments.bam.file }}
          re-checkrc
          re-progress 0.5
          htseq-count \
            --format=bam \
            --order=name \
            --stranded={{ stranded }} \
            --mode={{mode}} \
            --type={{ feature_class }} \
            --idattr={{ id_attribute }} "${NAME}_name_sorted.bam" {{ gff.annot.file }} \
            > "HTseq_rc.txt"
        fi
      {% else %}
        htseq-count \
          --format=bam \
          --order=pos \
          --stranded={{ stranded }} \
          --mode={{mode}} \
          --type={{ feature_class }} \
          --idattr={{ id_attribute }} {{ alignments.bam.file }} {{ gff.annot.file }} \
          > "HTseq_rc.txt"
      {% endif %}

      re-checkrc
      re-progress 0.8

      head -n -5 HTseq_rc.txt > rc_wo_header.txt
      expression_fpkm_tpm.R {{ gff.annot.file }} 'gtf' {{ feature_class }} {{ id_attribute }} 'rc_wo_header.txt'
      re-checkrc
      re-progress 0.9

      add_header.py rc_wo_header.txt rc.txt
      add_header.py fpkm_wo_header.tab fpkm.tab
      add_header.py tpm_wo_header.tab tpm.tab

      gzip -c HTseq_rc.txt > "${NAME}_HTseq_rc.txt.gz"
      gzip -c rc.txt > "${NAME}_rc.tab.gz"
      gzip -c fpkm.tab > "${NAME}_fpkm.tab.gz"
      gzip -c tpm.tab > "${NAME}_tpm.tab.gz"

      expression2storage.py --output json.txt "${NAME}_tpm.tab.gz"
      re-checkrc
      re-save exp_json json.txt
      re-progress 0.95

      re-save-file rc "${NAME}_rc.tab.gz"
      re-save-file fpkm "${NAME}_fpkm.tab.gz"
      re-save-file exp "${NAME}_tpm.tab.gz"
      re-save-file htseq_output "${NAME}_HTseq_rc.txt.gz"
      re-save exp_type 'TPM'
      re-save source {{gff.source}}
      re-save species {{alignments.species}}
      re-save build {{alignments.build}}
      re-save feature_type {{feature_type}}


- slug: htseq-count-raw
  name: HTSeq-count-raw
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/rnaseq:1.2.0
  data_name: "{{ alignments.bam.file|basename|default('?') }} ({{ (alignments|sample_name) }})"
  version: 1.2.1
  type: data:expression:htseq:raw
  category: analyses
  flow_collection: sample
  persistence: CACHED
  description: >
    Count the number of reads that map to a genomic feature (e.g. gene)
  input:
    - name: alignments
      label: Aligned reads
      type: data:alignment:bam
    - name: gff
      label: Annotation (GFF)
      type: data:annotation:gtf
    - name: mode
      label: Mode
      type: basic:string
      description: >
        Mode to handle reads overlapping more than one feature. Possible values for <mode> are union, intersection-strict and intersection-nonempty
      default: union
      choices:
        - label: union
          value: union
        - label: intersection-strict
          value: intersection-strict
        - label: intersection-nonempty
          value: intersection-nonempty
    - name: stranded
      label: Is data from a strand specific assay?
      type: basic:string
      description: >
        For stranded=no, a read is considered overlapping with a feature regardless of whether it is mapped to the same or the opposite strand as the feature. For stranded=yes and single-end reads, the read has to be mapped to the same strand as the feature. For paired-end reads, the first read has to be on the same strand and the second read on the opposite strand. For stranded=reverse, these rules are reversed
      default: "yes"
      choices:
        - label: "yes"
          value: "yes"
        - label: "no"
          value: "no"
        - label: reverse
          value: reverse
    - name: feature_class
      label: Feature class
      type: basic:string
      default: exon
      description: >
        Feature class (3rd column in GFF file) to be used. All other features will be ignored.
    - name: id_attribute
      label: ID attribute
      type: basic:string
      default: gene_id
      description: >
        GFF attribute to be used as feature ID. Several GFF lines with the same feature ID will be considered as parts of the same feature. The feature ID is used to identity the counts in the output table.
    - name: feature_type
      label: Feature type
      type: basic:string
      default: gene
      choices:
        - label: gene
          value: gene
        - label: transcript
          value: transcript
      description: >
        The type of feature the quantification program summarizes over (e.g. gene or transcript-level analysis).
    - name: name_ordered
      label: Use name-ordered BAM file for counting reads
      type: basic:boolean
      default: false
      required: false
      description: >
        Use name-sorted BAM file for reads quantification. Improves compatibility with larger BAM files, but requires more computational time.
  output:
    - name: htseq_output
      label: HTseq-count output
      type: basic:file
    - name: rc
      label: Read count
      type: basic:file
    - name: fpkm
      label: FPKM
      type: basic:file
    - name: exp
      label: rc (Read counts)
      type: basic:file
    - name: exp_json
      label: rc (json)
      type: basic:json
    - name: exp_type
      label: Expression Type (default output)
      type: basic:string
    - name: source
      label: Gene ID database
      type: basic:string
    - name: species
      label: Species
      type: basic:string
    - name: build
      label: Build
      type: basic:string
    - name: feature_type
      label: Feature type
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      NAME=`basename {{ alignments.bam.file }} .bam`
      re-progress 0.1

      {% if name_ordered %}
        if samtools view -H {{ alignments.bam.file }} | grep SO:queryname; then
          htseq-count \
            --format=bam \
            --order=name \
            --stranded={{ stranded }} \
            --mode={{mode}} \
            --type={{ feature_class }} \
            --idattr={{ id_attribute }} {{ alignments.bam.file }} {{ gff.annot.file }} \
            > "HTseq_rc.txt"
        else
          echo "Name sorting aligned reads:"
          samtools sort -n -o "${NAME}_name_sorted.bam" {{ alignments.bam.file }}
          re-checkrc
          re-progress 0.5
          htseq-count \
            --format=bam \
            --order=name \
            --stranded={{ stranded }} \
            --mode={{mode}} \
            --type={{ feature_class }} \
            --idattr={{ id_attribute }} "${NAME}_name_sorted.bam" {{ gff.annot.file }} \
            > "HTseq_rc.txt"
        fi
      {% else %}
        htseq-count \
          --format=bam \
          --order=pos \
          --stranded={{ stranded }} \
          --mode={{mode}} \
          --type={{ feature_class }} \
          --idattr={{ id_attribute }} {{ alignments.bam.file }} {{ gff.annot.file }} \
          > "HTseq_rc.txt"
      {% endif %}

      re-checkrc
      re-progress 0.8

      head -n -5 HTseq_rc.txt > rc_wo_header.txt
      expression_fpkm_tpm.R {{ gff.annot.file }} 'gtf' {{ feature_class }} {{ id_attribute }} 'rc_wo_header.txt'
      re-checkrc
      re-progress 0.9

      add_header.py rc_wo_header.txt rc.txt
      add_header.py fpkm_wo_header.tab fpkm.tab
      add_header.py tpm_wo_header.tab tpm.tab

      gzip -c HTseq_rc.txt > "${NAME}_HTseq_rc.txt.gz"
      gzip -c rc.txt > "${NAME}_rc.tab.gz"
      gzip -c fpkm.tab > "${NAME}_fpkm.tab.gz"
      gzip -c tpm.tab > "${NAME}_tpm.tab.gz"

      expression2storage.py --output json.txt "${NAME}_rc.tab.gz"
      re-checkrc
      re-save exp_json json.txt
      re-progress 0.95

      re-save-file rc "${NAME}_rc.tab.gz"
      re-save-file fpkm "${NAME}_fpkm.tab.gz"
      re-save-file exp "${NAME}_rc.tab.gz"
      re-save-file htseq_output "${NAME}_HTseq_rc.txt.gz"
      re-save exp_type 'Read count'
      re-save source {{gff.source}}
      re-save species {{alignments.species}}
      re-save build {{alignments.build}}
      re-save feature_type {{feature_type}}
