# ==========================
# Expression - featureCounts
# ==========================
---

- slug: feature_counts
  name: featureCounts
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: public.ecr.aws/s4q6j6e8/resolwebio/rnaseq:5.11.0
    resources:
      cores: 10
      memory: 32768
      network: true
  data_name: "{{ alignment.aligned_reads|sample_name|default('?') }}"
  version: 4.1.1
  type: data:expression:featurecounts
  category: Quantify
  flow_collection: sample
  persistence: CACHED
  description: |
    featureCounts is a highly efficient general-purpose read summarization
    program that counts mapped reads for genomic features such as genes, exons,
    promoter, gene bodies, genomic bins and chromosomal locations. It can be
    used to count both RNA-seq and genomic DNA-seq reads. See the
    [official website](http://bioinf.wehi.edu.au/featureCounts/) and the
    [introductory paper](https://academic.oup.com/bioinformatics/article/30/7/923/232889)
    for more information.

    featureCounts output includes raw counts and normalized (TPM/CPM) expression values.
    Normalized expression values are computed using rnanorm Python package under
    union-exon gene length model.
  input:
    - name: alignment
      label: Alignment
      group:
        - name: aligned_reads
          label: Aligned reads
          type: data:alignment:bam
        - name: assay_type
          label: Assay type
          type: basic:string
          default: non_specific
          description: |
            Indicate if strand-specific read counting should be performed. For
            paired-end reads, strand of the first read is taken as the strand
            of the whole fragment. FLAG field is used to tell if a read is
            first or second read in a pair. Automated strand detection is enabled
            using the [Salmon](https://salmon.readthedocs.io/en/latest/library_type.html)
            tool's build-in functionality. To use this option, cDNA (transcriptome)
            index file crated using the Salmon indexing tool must be provided.
          choices:
            - label: Strand non-specific
              value: non_specific
            - label: Strand-specific forward
              value: forward
            - label: Strand-specific reverse
              value: reverse
            - label: Detect automatically
              value: auto
        - name: cdna_index
          label: cDNA index file
          type: data:index:salmon
          required: false
          hidden: "alignment.assay_type != 'auto'"
          description: |
            Transcriptome index file created using the Salmon indexing tool.
            cDNA (transcriptome) sequences used for index file creation must be
            derived from the same species as the input sequencing reads to
            obtain the reliable analysis results.
        - name: n_reads
          label: Number of reads in subsampled alignment file
          type: basic:integer
          default: 5000000
          hidden: "alignment.assay_type != 'auto'"
          description: |
            Alignment (.bam) file subsample size. Increase the number of reads
            to make automatic detection more reliable. Decrease the number of
            reads to make automatic detection run faster.
    - name: annotation
      label: Annotation
      group:
        - name: annotation
          label: Annotation
          type: data:annotation
          description: |
            GTF and GFF3 annotation formats are supported.
        - name: feature_class
          label: Feature class
          type: basic:string
          default: exon
          description: |
            Feature class (3rd column in GTF/GFF3 file) to be used. All other
            features will be ignored.
        - name: feature_type
          label: Feature type
          type: basic:string
          default: gene
          choices:
            - label: gene
              value: gene
            - label: transcript
              value: transcript
          description: |
            The type of feature the quantification program summarizes over
            (e.g. gene or transcript-level analysis). The value of this
            parameter needs to be chosen in line with 'ID attribute' below.
        - name: id_attribute
          label: ID attribute
          type: basic:string
          default: gene_id
          allow_custom_choice: true
          choices:
            - label: gene_id
              value: gene_id
            - label: transcript_id
              value: transcript_id
            - label: ID
              value: ID
            - label: geneid
              value: geneid
            - label: miRNA name
              value: Name
          description: |
            GTF/GFF3 attribute to be used as feature ID. Several GTF/GFF3 lines
            with the same feature ID will be considered as parts of the same
            feature. The feature ID is used to identify the counts in the
            output table. In GTF files this is usually 'gene_id', in GFF3 files
            this is often 'ID', and 'transcript_id' is frequently a valid
            choice for both annotation formats.
    - name: normalization_type
      label: Normalization type
      type: basic:string
      description: |
        The default expression normalization type.
      default: TPM
      choices:
        - label: TPM
          value: TPM
        - label: CPM
          value: CPM
        - label: RPKUM
          value: RPKUM
    - name: mappability
      label: Mappability
      type: data:mappability:bcm
      required: false
      hidden: "normalization_type != 'RPKUM'"
      description: |
        Genome mappability information
    - name: show_advanced
      label: Show advanced options
      type: basic:boolean
      default: false
      description: |
        Inspect and modify parameters
    - name: advanced
      label: Advanced
      hidden: '!show_advanced'
      group:
        - name: summarization_level
          label: Level of summarization
          group:
            - name: count_features
              label: Perform read counting at feature level
              type: basic:boolean
              default: false
              description: |
                Count reads for exons rather than genes.
        - name: overlap
          label: Overlap between reads and features
          group:
            - name: allow_multi_overlap
              label: >
                Assign reads to all their overlapping features or meta-features
              type: basic:boolean
              default: false
            - name: min_overlap
              label: >
                Minimum number of overlapping bases in a read that is required
                for read assignment
              type: basic:integer
              default: 1
              description: |
                Number of overlapping bases is counted from both reads if
                paired-end. If a negative value is provided, then a gap of up
                to specified size will be allowed between read and the feature
                that the read is assigned to.
            - name: frac_overlap
              label: >
                Minimum fraction of overlapping bases in a read that is
                required for read assignment
              type: basic:decimal
              default: 0.0
              description: |
                Value should be within range [0, 1]. Number of overlapping
                bases is counted from both reads if paired end. Both this
                option and 'Minimum number of overlapping bases in a read
                that is required for read assignment' need to be satisfied
                for read assignment.
            - name: frac_overlap_feature
              label: >
                Minimum fraction of overlapping bases included in a feature
                that is required for overlapping with a read or a read pair
              type: basic:decimal
              default: 0.0
              description: |
                Value should be within range [0, 1].
            - name: largest_overlap
              label: >
                Assign reads to a feature or meta-feature that has the largest
                number of overlapping bases
              type: basic:boolean
              default: false
            - name: read_extension_5
              label: >
                Number of bases to extend reads upstream by from their 5' end
              type: basic:integer
              default: 0
            - name: read_extension_3
              label: >
                Number of bases to extend reads upstream by from their 3' end
              type: basic:integer
              default: 0
            - name: read_to_pos
              label: Reduce reads to their 5'-most or 3'-most base
              type: basic:integer
              required: false
              description: |
                Read counting is performed based on the single base the read
                is reduced to.
        - name: multi_mapping_reads
          label: Multi-mapping reads
          group:
            - name: count_multi_mapping_reads
              label: Count multi-mapping reads
              type: basic:boolean
              default: false
              description: |
                For a multi-mapping read, all its reported alignments will be
                counted. The 'NH' tag in BAM input is used to detect
                multi-mapping reads.
        - name: fractional_counting
          label: Fractional counting
          group:
            - name: fraction
              label: Assign fractional counts to features
              type: basic:boolean
              default: false
              disabled: >
                !advanced.multi_mapping_reads.count_multi_mapping_reads &&
                !advanced.overlap.allow_multi_overlap
              required: false
              description: |
                This option must be used together with 'Count multi-mapping
                reads' or 'Assign reads to all their overlapping features or
                meta-features' or both. When 'Count multi-mapping reads' is
                checked, each reported alignment from a multi-mapping read
                (identified via 'NH' tag) will carry a count of 1 / x, instead
                of 1 (one), where x is the total number of alignments reported
                for the same read. When 'Assign reads to all their overlapping
                features or meta-features' is checked, each overlapping
                feature will receive a count of 1 / y, where y is the total
                number of features overlapping with the read. When both 'Count
                multi-mapping reads' and 'Assign reads to all their overlapping
                features or meta-features' are specified, each alignment will
                carry a count of 1 / (x * y).
        - name: read_filtering
          label: Read filtering
          group:
            - name: min_mqs
              label: Minimum mapping quality score
              type: basic:integer
              default: 0
              description: |
                The minimum mapping quality score a read must satisfy in order
                to be counted. For paired-end reads, at least one end should
                satisfy this criterion.
            - name: split_only
              label: Count only split alignments
              type: basic:boolean
              default: false
            - name: non_split_only
              label: Count only non-split alignments
              type: basic:boolean
              default: false
            - name: primary
              label: Count only primary alignments
              type: basic:boolean
              default: false
              description: |
                Primary alignments are identified using bit 0x100 in BAM
                FLAG field.
            - name: ignore_dup
              label: Ignore duplicate reads in read counting
              type: basic:boolean
              default: false
              description: |
                Duplicate reads are identified using bit Ox400 in BAM FLAG
                field. The whole read pair is ignored if one of the reads is a
                duplicate read for paired-end data.
        - name: exon_exon_junctions
          label: Exon-exon junctions
          group:
            - name: junc_counts
              label: Count number of reads supporting each exon-exon junction
              type: basic:boolean
              default: false
              description: |
                Junctions are identified from those exon-spanning reads in
                input (containing 'N' in CIGAR string).
            - name: genome
              label: Genome
              type: data:seq:nucleotide
              disabled: '!advanced.exon_exon_junctions.junc_counts'
              required: false
              description: |
                Reference sequences used in read mapping that produced the
                provided BAM files. This optional argument can be used to
                improve read counting for junctions.
        - name: paired_end
          label: Parameters specific to paired-end reads
          group:
            - name: is_paired_end
              label: Count fragments (or templates) instead of reads
              type: basic:boolean
              default: true
            - name: require_both_ends_mapped
              label: Count only read pairs that have both ends aligned
              type: basic:boolean
              default: false
            - name: check_frag_length
              label: >
                Check fragment length when assigning fragments to meta-features
                or features
              type: basic:boolean
              description: |
                Use minimum and maximum fragment/template length to set
                thresholds.
              default: false
            - name: min_frag_length
              label: Minimum fragment/template length
              type: basic:integer
              default: 50
              disabled: '!advanced.paired_end.check_frag_length'
              required: false
            - name: max_frag_length
              label: Maximum fragment/template length
              type: basic:integer
              default: 600
              disabled: '!advanced.paired_end.check_frag_length'
              required: false
            - name: do_not_count_chimeric_fragments
              label: Do not count chimeric fragments
              type: basic:boolean
              default: false
              description: |
                Do not count read pairs that have their two ends mapped to
                different chromosomes or mapped to same chromosome but on
                different strands.
            - name: do_not_sort
              label: Do not sort reads in BAM input
              type: basic:boolean
              default: false
        - name: read_groups
          label: Read groups
          group:
            - name: by_read_group
              label: Assign reads by read group
              type: basic:boolean
              default: false
              description: |
                RG tag is required to be present in the input BAM files.
        - name: long_reads
          label: Long reads
          group:
            - name: count_long_reads
              label: Count long reads such as Nanopore and PacBio reads
              type: basic:boolean
              default: false
        - name: miscellaneous
          label: Miscellaneous
          group:
            - name: report_reads
              label: >
                Output detailed assignment results for each read or read pair
              type: basic:boolean
              default: false
            - name: max_mop
              label: Maximum number of 'M' operations allowed in a CIGAR string
              type: basic:integer
              default: 10
              description: |
                Both 'X' and '=' are treated as 'M' and adjacent 'M' operations
                are merged in the CIGAR string.
            - name: verbose
              label: Output verbose information
              type: basic:boolean
              default: false
              description: |
                Output verbose information for debugging, such as unmatched
                chromosome / contig names.
  output:
    - name: rc
      label: Read counts
      type: basic:file
    - name: tpm
      label: TPM
      type: basic:file
    - name: cpm
      label: CPM
      type: basic:file
    - name: exp
      label: Default expression output
      type: basic:file
    - name: exp_json
      label: Default expression output (json)
      type: basic:json
    - name: exp_type
      label: Expression normalization type (on default output)
      type: basic:string
    - name: exp_set
      label: Expressions
      type: basic:file
    - name: exp_set_json
      label: Expressions (json)
      type: basic:json
    - name: feature_counts_output
      label: featureCounts output
      type: basic:file
    - name: counts_summary
      label: Counts summary
      type: basic:file
    - name: read_assignments
      label: Read assignments
      type: basic:file
      required: false
      description: |
        Read assignment results for each read (or fragment if paired end).
    - name: strandedness_report
      label: Strandedness report file
      type: basic:file
      required: false
    - name: source
      label: Gene ID database
      type: basic:string
    - name: species
      label: Species
      type: basic:string
    - name: build
      label: Build
      type: basic:string
    - name: feature_type
      label: Feature type
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      declare -A strandedness
      strandedness=(['non_specific']=0 ['forward']=1 ['reverse']=2)

      {% if not alignment.aligned_reads.species == annotation.annotation.species %}
        re-error \
          {{ ('Species of aligned reads (%s) and annotation (%s) do not match. ' ~
             'Please provide aligned reads and annotation with the same species.')
             |format(alignment.aligned_reads.species, annotation.annotation.species) }}
      {% endif %}

      {% if not alignment.aligned_reads.build == annotation.annotation.build %}
        re-error \
          {{ ('Builds of aligned reads (%s) and annotation (%s) do not match. ' ~
             'Please provide aligned reads and annotation with the same build.')
             |format(alignment.aligned_reads.build, annotation.annotation.build) }}
      {% endif %}

      {% if alignment.assay_type == 'auto' and not alignment.cdna_index %}
        re-error 'cDNA sequence index must be provided to automatically detect strandedness.'
      {% endif %}

      {% if alignment.assay_type == 'auto' and alignment.cdna_index %}
        {% if alignment.aligned_reads.species != alignment.cdna_index.species %}
          re-error \
            {{ ('Species of aligned reads (%s) and cDNA index (%s) do not match. ' ~
              'Please provide aligned reads and cDNA index with the same species.')
              |format(alignment.aligned_reads.species, alignment.cdna_index.species) }}
        {% endif %}
      {% endif %}

      {% if normalization_type == 'RPKUM' and not mappability %}
        re-error "Genome mappability file is a required input for the RPKUM normalization."
      {% endif %}

      # Avoid reporting the full path to the alignment (.bam) file in the counts summary file.
      # This is to prevent the FeatureCounts results to be reported as a separate sample in the MultiQC report
      ln -s {{ alignment.aligned_reads.bam.file }} {{ alignment.aligned_reads.bam.file | basename }}

      {% if alignment.assay_type == 'auto' %}
        . detect_strandedness.sh \
          {{ alignment.aligned_reads.bam.file | basename }} \
          {{ alignment.n_reads }} \
          {{ alignment.cdna_index.index.dir }} \
          {{ requirements.resources.cores }} \
          strandedness_report
      {% else %}
        STRANDEDNESS=${strandedness[{{ alignment.assay_type }}]}
      {% endif %}

      {% set alignment_fn = alignment.aligned_reads.bam.file|basename %}
      {% set name = alignment_fn[:-4]
         if alignment_fn.endswith('.bam')
         else alignment_fn %}
      {% set annotation_fmt = 'gtf'
         if annotation.annotation|type|subtype('data:annotation:gtf')
         else 'gff3' %}

      # Replace empty gene_id entries in annotation file if source is UCSC
      {% if annotation.annotation.source == 'UCSC' and annotation.annotation|type|subtype('data:annotation:gtf') %}
        awk -F'\t' '
          {OFS = FS}
          {gsub("gene_id \"\"","gene_id \"unknown\"",$9); print $0 }
        ' {{ annotation.annotation.annot.file }} > annotation_filtered.gtf
        {% set annotation_file = 'annotation_filtered.gtf' %}
      {% else %}
        {% set annotation_file = annotation.annotation.annot.file %}
      {% endif %}

      if [[ $(samtools view -c -f 1 {{ alignment.aligned_reads.bam.file | basename }}) == 0 ]]
      then
        featureCounts \
          -a {{ annotation_file }} \
          -o featureCounts_rc.txt \
          -F GTF \
          -t {{ annotation.feature_class }} \
          -g {{ annotation.id_attribute }} \
          {% if advanced.summarization_level.count_features %} -f {% endif %} \
          {% if advanced.overlap.allow_multi_overlap %} \
            -O \
          {% endif %} \
          --minOverlap {{ advanced.overlap.min_overlap }} \
          --fracOverlap {{ advanced.overlap.frac_overlap }} \
          --fracOverlapFeature {{ advanced.overlap.frac_overlap_feature }} \
          {% if advanced.overlap.largest_overlap %} --largestOverlap {% endif %} \
          --readExtension5 {{ advanced.overlap.read_extension_5 }} \
          --readExtension3 {{ advanced.overlap.read_extension_3 }} \
          {% if advanced.overlap.read_to_pos %} --read2pos {{ advanced.overlap.read_to_pos }} {% endif %} \
          {% if advanced.multi_mapping_reads.count_multi_mapping_reads %} -M {% endif %} \
          {% if advanced.fractional_counting.fraction %} --fraction {% endif %} \
          -Q {{ advanced.read_filtering.min_mqs }} \
          {% if advanced.read_filtering.split_only %} --countSplitAlignmentsOnly {% endif %} \
          {% if advanced.read_filtering.non_split_only %} --countNonSplitAlignmentsOnly {% endif %} \
          {% if advanced.read_filtering.primary %} --primary {% endif %} \
          {% if advanced.read_filtering.ignore_dup %} --ignoreDup {% endif %} \
          -s ${STRANDEDNESS} \
          {% if advanced.exon_exon_junctions.junc_counts %} -J {% endif %} \
          {% if advanced.exon_exon_junctions.junc_counts and advanced.exon_exon_junctions.genome %} \
             -G {{ advanced.exon_exon_junctions.genome.fasta.file }} \
          {% endif %} \
          -T {{ requirements.resources.cores }} \
          {% if advanced.read_groups.by_read_group %} --byReadGroup {% endif %} \
          {% if advanced.long_reads.count_long_reads %} -L {% endif %} \
          {% if advanced.miscellaneous.report_reads %} -R CORE {% endif %} \
          --maxMOp {{ advanced.miscellaneous.max_mop }} \
          {% if advanced.miscellaneous.verbose %} --verbose {% endif %} \
          {{ alignment.aligned_reads.bam.file | basename }}
      else
        featureCounts \
          -a {{ annotation_file }} \
          -o featureCounts_rc.txt \
          -F GTF \
          -t {{ annotation.feature_class }} \
          -g {{ annotation.id_attribute }} \
          {% if advanced.summarization_level.count_features %} -f {% endif %} \
          {% if advanced.overlap.allow_multi_overlap %} \
            -O \
          {% endif %} \
          --minOverlap {{ advanced.overlap.min_overlap }} \
          --fracOverlap {{ advanced.overlap.frac_overlap }} \
          --fracOverlapFeature {{ advanced.overlap.frac_overlap_feature }} \
          {% if advanced.overlap.largest_overlap %} --largestOverlap {% endif %} \
          --readExtension5 {{ advanced.overlap.read_extension_5 }} \
          --readExtension3 {{ advanced.overlap.read_extension_3 }} \
          {% if advanced.overlap.read_to_pos %} --read2pos {{ advanced.overlap.read_to_pos }} {% endif %} \
          {% if advanced.multi_mapping_reads.count_multi_mapping_reads %} -M {% endif %} \
          {% if advanced.fractional_counting.fraction %} --fraction {% endif %} \
          -Q {{ advanced.read_filtering.min_mqs }} \
          {% if advanced.read_filtering.split_only %} --countSplitAlignmentsOnly {% endif %} \
          {% if advanced.read_filtering.non_split_only %} --countNonSplitAlignmentsOnly {% endif %} \
          {% if advanced.read_filtering.primary %} --primary {% endif %} \
          {% if advanced.read_filtering.ignore_dup %} --ignoreDup {% endif %} \
          -s ${STRANDEDNESS} \
          {% if advanced.exon_exon_junctions.junc_counts %} -J {% endif %} \
          {% if advanced.exon_exon_junctions.junc_counts and advanced.exon_exon_junctions.genome %} \
            -G {{ advanced.exon_exon_junctions.genome.fasta.file }} \
          {% endif %} \
          {% if advanced.paired_end.is_paired_end %} -p {% endif %} \
          {% if advanced.paired_end.require_both_ends_mapped %} -B {% endif %} \
          {% if advanced.paired_end.check_frag_length %} -P {% endif %} \
          {% if advanced.paired_end.check_frag_length %} -d {{ advanced.paired_end.min_frag_length }} {% endif %} \
          {% if advanced.paired_end.check_frag_length %} -D {{ advanced.paired_end.max_frag_length }} {% endif %} \
          {% if advanced.paired_end.do_not_count_chimeric_fragments %} -C {% endif %} \
          {% if advanced.paired_end.do_not_sort %} --donotsort {% endif %} \
          -T {{ requirements.resources.cores }} \
          {% if advanced.read_groups.by_read_group %} --byReadGroup {% endif %} \
          {% if advanced.long_reads.count_long_reads %} -L {% endif %} \
          {% if advanced.miscellaneous.report_reads %} -R CORE {% endif %} \
          --maxMOp {{ advanced.miscellaneous.max_mop }} \
          {% if advanced.miscellaneous.verbose %} --verbose {% endif %} \
          {{ alignment.aligned_reads.bam.file | basename }}
      fi
      re-checkrc "featureCounts failed"

      # extract raw counts and gene lengths from the featureCounts output and add the required column headers
      tail -n +3 featureCounts_rc.txt | cut -f1,7 > rc_wo_header.txt
      echo -e "FEATURE_ID\tEXPRESSION" | cat - rc_wo_header.txt > rc.txt

      tail -n +3 featureCounts_rc.txt | cut -f1,6 > gene_lengths_wo_header.txt
      echo -e "FEATURE_ID\tGENE_LENGTHS" | cat - gene_lengths_wo_header.txt > gene_lengths.txt

      # normalize raw counts to TPM and CPM
      rnanorm rc.txt --gene-lengths gene_lengths.txt --tpm-output tpm.txt --cpm-output cpm.txt
      re-checkrc
      re-progress 0.9

      # re-header the raw and normalized output files
      sed -i '' -e '1s/FEATURE_ID/Gene/' -e '1s/EXPRESSION/Expression/' rc.txt
      sed -i '' -e '1s/FEATURE_ID/Gene/' -e '1s/EXPRESSION/Expression/' tpm.txt
      sed -i '' -e '1s/FEATURE_ID/Gene/' -e '1s/EXPRESSION/Expression/' cpm.txt

      gzip -c featureCounts_rc.txt > {{ name ~ '_featureCounts_rc.txt.gz' }}
      gzip -c rc.txt > {{ name ~ '_rc.tab.gz' }}
      gzip -c tpm.txt > {{ name ~ '_tpm.tab.gz' }}
      gzip -c cpm.txt > {{ name ~ '_cpm.tab.gz' }}

      {% if normalization_type == 'TPM' %}
        expression2storage.py --output json.txt {{ name ~ '_tpm.tab.gz' }}
        {% set default_exp_output = name ~ '_tpm.tab.gz' %}
      {% elif normalization_type == 'CPM' %}
        expression2storage.py --output json.txt {{ name ~ '_cpm.tab.gz' }}
        {% set default_exp_output = name ~ '_cpm.tab.gz' %}
      {% elif normalization_type == 'RPKUM' %}
        expression_rpkum.py \
         -c {{ name ~ '_rc.tab.gz' }} \
         -m {{ mappability.mappability.file }} \
         -o {{ name ~ '_rpkum.tab.gz' }}
        expression2storage.py --output json.txt {{ name ~ '_rpkum.tab.gz' }}
        {% set default_exp_output = name ~ '_rpkum.tab.gz' %}
      {% else %}
        re-error "Unsupported expression normalization type used."
      {% endif %}

      re-checkrc
      re-save exp_json json.txt
      re-progress 0.95

      create_expression_set.py \
        --expressions {{ name ~ '_rc.tab.gz' }} \
        --source_db {{ annotation.annotation.source }} \
        --species {{ alignment.aligned_reads.species }} \
        --output_name {{ name ~ '_expressions' }} \
        --norm_expressions {{ name ~ '_tpm.tab.gz' }} {{ name ~ '_cpm.tab.gz' }} \
        --norm_expressions_type TPM CPM
      re-checkrc

      re-save-file feature_counts_output {{ name ~ '_featureCounts_rc.txt.gz' }}
      re-save-file counts_summary featureCounts_rc.txt.summary
      {% if advanced.miscellaneous.report_reads %}
        re-save-file read_assignments {{ name ~ '.bam.featureCounts' }}
      {% endif %}
      re-save-file rc {{ name ~ '_rc.tab.gz' }}
      re-save-file tpm {{ name ~ '_tpm.tab.gz' }}
      re-save-file cpm {{ name ~ '_cpm.tab.gz' }}
      re-save-file exp {{ default_exp_output }}
      re-save-file exp_set {{ name ~ '_expressions.txt.gz' }}
      re-save exp_set_json {{ name ~ '_expressions.json' }}
      re-save exp_type {{ normalization_type }}
      re-save source {{ annotation.annotation.source }}
      re-save species {{ alignment.aligned_reads.species }}
      re-save build {{ alignment.aligned_reads.build }}
      re-save feature_type {{ annotation.feature_type }}
