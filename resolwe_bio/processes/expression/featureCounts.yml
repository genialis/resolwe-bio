# ==========================
# Expression - featureCounts
# ==========================
---

- slug: feature_counts
  name: FeatureCounts
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/legacy:latest
  data_name: "{{ alignments.bam.file|basename|default('?') }} ({{ (alignments|sample_name) }})"
  version: 0.3.2
  type: data:expression:featurecounts
  category: analyses
  flow_collection: sample
  persistence: CACHED
  description: >
    A highly efficient and accurate read summarization program.
  input:
    - name: alignments
      label: Aligned reads
      type: data:alignment:bam
    - name: annotation
      label: Annotation (GTF/GFF3)
      type: data:annotation
    - name: feature_type
      label: Feature type
      type: basic:string
      default: gene
      choices:
        - label: gene
          value: gene
        - label: transcript
          value: transcript
      description: >
        The type of feature the quantification program summarizes over (e.g. gene or transcript-level analysis).
    - name: id_attribute
      label: ID attribute
      type: basic:string
      default: gene_id
      allow_custom_choice: true
      choices:
        - label: gene_id
          value: gene_id
        - label: transcript_id
          value: transcript_id
        - label: ID
          value: ID
        - label: geneid
          value: geneid
      description: >
        GTF or GFF attribute to be used as feature ID.
        Several GTF lines with the same feature ID will be considered as parts of the same feature.
        The feature ID is used to identity the counts in the output table.
    - name: feature_class
      label: Feature class
      type: basic:string
      default: exon
      description: >
        Feature class (3rd column in GFF file) to be used. All other features will be ignored.
    - name: count_multi_mapping_reads
      label: Count multi mapping reads
      type: basic:boolean
      required: false
      default: false
      description: >
        If specified, multi-mapping reads/fragments will be counted.
    - name: min_mqs
      label: Minimal mapping quality score
      type: basic:integer
      required: false
      default: 0
      description: >
        The minimum mapping quality score a read must satisfy in order to be counted. For paired-end reads, at least one end should satisfy this criteria.
    - name: strand_specific
      label: Strand specific read counting
      type: basic:integer
      required: false
      default: 0
      description: >
        Indicate if strand-specific read counting should be performed.
      choices:
        - label: unstranded
          value: 0
        - label: stranded
          value: 1
        - label: reversely stranded
          value: 2
    - name: PE_options
      label: Paired end alignment options
      group:
        - name: is_paired_end
          label: Is paired end
          type: basic:boolean
          required: false
          default: false
          description: >
            If specified, fragments (or templates) will be counted instead of reads. This option is only applicable for paired-end reads.
        - name: require_both_ends_mapped
          label: Require both ends mapped
          type: basic:boolean
          required: false
          description: >
            If specified, only fragments that have both ends successfully aligned will be considered for summarization.
        - name: count_chimeric_fragments
          label: Count chimeric fragments
          type: basic:boolean
          required: false
          description: >
           If specified, the chimeric fragments (those fragments that have their two ends aligned to different chromosomes) will NOT be counted.
  output:
    - name: rc
      label: Read counts
      type: basic:file
    - name: fpkm
      label: FPKM
      type: basic:file
    - name: exp
      label: TPM (Transcripts Per Million)
      type: basic:file
    - name: exp_json
      label: TPM (json)
      type: basic:json
    - name: exp_type
      label: Expression Type (default output)
      type: basic:string
    - name: feature_counts_output
      label: featureCounts output
      type: basic:file
    - name: counts_summary
      label: Counts summary
      type: basic:file
    - name: read_assignments
      label: Read assignments
      type: basic:file
      description: >
        Read assignment results for each read (or fragment if paired end).
    - name: source
      label: Gene ID database
      type: basic:string
    - name: species
      label: Species
      type: basic:string
    - name: build
      label: Build
      type: basic:string
    - name: feature_type
      label: Feature type
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      NAME=`basename {{ alignments.bam.file}} .bam`

      COUNT_MULTI_MAPPING_READS="{% if count_multi_mapping_reads %} -M{% endif %}"

      IS_PAIRED_END="{% if PE_options.is_paired_end %} -p{% endif %}"
      REQUIRE_BOTH_ENDS_MAPPED="{% if PE_options.require_both_ends_mapped %} -B{% endif %}"
      COUNT_CHIMERIC_FRAGMENTS="{% if PE_options.count_chimeric_fragments %} -C{% endif %}"

      # Check if reads are paired or single-ended.
      if [[ $(samtools view -c -f 1 {{ alignments.bam.file }}) != 0 ]]; then
        featureCounts \
          -a {{annotation.annot.file}} \
          -o "featureCounts_rc.txt" \
          -g {{ id_attribute }} \
          ${COUNT_MULTI_MAPPING_READS} \
          -Q {{ min_mqs }} \
          -s {{ strand_specific }} \
          -t {{ feature_class }} \
          ${REQUIRE_BOTH_ENDS_MAPPED} \
          ${COUNT_CHIMERIC_FRAGMENTS} \
          ${IS_PAIRED_END} \
          -R {{ alignments.bam.file }}
      else
        featureCounts \
          -a {{annotation.annot.file}} \
          -o "featureCounts_rc.txt" \
          -g {{ id_attribute }} \
          ${COUNT_MULTI_MAPPING_READS} \
          -Q {{ min_mqs }} \
          -s {{ strand_specific }} \
          -t {{ feature_class }} \
          -R {{ alignments.bam.file }}
      fi
      re-checkrc "featureCounts failed"

      tail -n +3 featureCounts_rc.txt | cut -f1,7 > rc_wo_header.txt

      {% if annotation|type|subtype('data:annotation:gtf') %}
        ANNOTATION_FORMAT=gtf
      {% else %}
        ANNOTATION_FORMAT=gff3
      {% endif %}

      expression_fpkm_tpm.R  \
        {{ annotation.annot.file }} \
        ${ANNOTATION_FORMAT} \
        {{ feature_class }} \
        {{ id_attribute }} \
        'rc_wo_header.txt'
      re-checkrc
      re-progress 0.9

      add_header.py rc_wo_header.txt rc.txt
      add_header.py fpkm_wo_header.tab fpkm.tab
      add_header.py tpm_wo_header.tab tpm.tab

      gzip -c featureCounts_rc.txt > "${NAME}_featureCounts_rc.txt.gz"
      gzip -c rc.txt > "${NAME}_rc.tab.gz"
      gzip -c fpkm.tab > "${NAME}_fpkm.tab.gz"
      gzip -c tpm.tab > "${NAME}_tpm.tab.gz"

      expression2storage.py --output json.txt "${NAME}_tpm.tab.gz"
      re-checkrc
      re-save exp_json json.txt
      re-progress 0.95

      re-save-file feature_counts_output "${NAME}_featureCounts_rc.txt.gz"
      re-save-file counts_summary "featureCounts_rc.txt.summary"
      re-save-file read_assignments "${NAME}.bam.featureCounts"
      re-save-file rc "${NAME}_rc.tab.gz"
      re-save-file fpkm "${NAME}_fpkm.tab.gz"
      re-save-file exp "${NAME}_tpm.tab.gz"
      re-save exp_type 'TPM'
      re-save source {{annotation.source}}
      re-save species {{alignments.species}}
      re-save build {{alignments.build}}
      re-save feature_type {{feature_type}}
