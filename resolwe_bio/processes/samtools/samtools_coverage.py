"""Samtools coverage."""

from pathlib import Path

from plumbum import TEE

from resolwe.process import (
    BooleanField,
    Cmd,
    DataField,
    FileField,
    GroupField,
    IntegerField,
    ListField,
    Persistence,
    Process,
    SchedulingClass,
    StringField,
)


class SamtoolsCoverageMulti(Process):
    """Samtools coverage for multiple BAM files.

    Computes the depth at each position or region and creates tabulated text.

    For more information about samtools coverage, click
    [here](https://www.htslib.org/doc/samtools-coverage.html).
    """

    slug = "samtools-coverage-multi"
    process_type = "data:samtoolscoverage:multi"
    name = "Samtools coverage (multi-sample)"
    requirements = {
        "expression-engine": "jinja",
        "executor": {
            "docker": {"image": "public.ecr.aws/genialis/resolwebio/rnaseq:6.0.0"},
        },
        "resources": {
            "cores": 2,
            "memory": 16384,
        },
    }
    category = "Samtools"
    data_name = "Samtools coverage"
    version = "1.0.1"
    scheduling_class = SchedulingClass.BATCH
    persistence = Persistence.CACHED

    class Input:
        """Input fields for SamtoolsCoverageMulti."""

        bam = ListField(
            DataField(data_type="alignment:bam"),
            label="Input BAM files",
            description="Select BAM file(s) for the analysis. Coverage information will "
            "be calculated from the merged alignments.",
        )
        region = StringField(
            label="Region",
            description="Region can be specified as: RNAME:STARTPOS-ENDPOS "
            "and all position coordinates are 1-based, where RNAME is the "
            "name of the contig. If the input BAM file was generated by "
            "General RNA-seq pipeline, you should use only chromosome "
            "numbers to subset the input file, e.g. 3:30293-39103.",
            required=False,
        )

        class AdvancedOptions:
            """Advanced options."""

            min_read_length = IntegerField(
                label="Minimum read length",
                required=False,
                description="Ignore reads shorter than specified number of "
                "base pairs.",
            )
            min_mq = IntegerField(
                label="Minimum mapping quality",
                required=False,
                description="Minimum mapping quality for an alignment to be used.",
            )
            min_bq = IntegerField(
                label="Minimum base quality",
                required=False,
                description="Minimum base quality for a base to be considered.",
            )
            excl_flags = ListField(
                StringField(),
                label="Filter flags",
                default=["UNMAP", "SECONDARY", "QCFAIL", "DUP"],
                description="Filter flags: skip reads with mask bits set. "
                "Press ENTER after each flag.",
            )
            depth = IntegerField(
                label="Maximum allowed coverage depth",
                default=1000000,
                description="If 0, depth is set to the maximum integer value "
                "effectively removing any depth limit.",
            )
            no_header = BooleanField(
                label="No header",
                default=False,
                description="Do not output header.",
            )

        advanced = GroupField(AdvancedOptions, label="Advanced options")

    class Output:
        """Output fields for SamtoolsCoverageMulti."""

        table = FileField(label="Output coverage table")
        build = StringField(label="Build")
        species = StringField(label="Species")

    def run(self, inputs, outputs):
        """Run the analysis."""

        output_name = "samtools_coverage.tsv"

        if len(inputs.bam) == 1:
            self.error(
                "Only one BAM file was selected. Please select more than one "
                "input BAM file or use process Samtools coverage (single-sample)."
            )

        if len(inputs.bam) > 1:
            for bam in inputs.bam:
                if inputs.bam[0].output.species != bam.output.species:
                    self.error(
                        "Not all BAM files are from the same species. "
                        f"BAM file {Path(inputs.bam[0].output.bam.path).name} is from "
                        f"{inputs.bam[0].output.species}, "
                        f"while file {Path(bam.output.bam.path).name} is from {bam.output.species}."
                    )

                if inputs.bam[0].output.build != bam.output.build:
                    self.error(
                        "Not all BAM files have the same genome build. "
                        f"BAM file {Path(inputs.bam[0].output.bam.path).name} has build "
                        f"{inputs.bam[0].output.build}, "
                        f"while file {Path(bam.output.bam.path).name} has build {bam.output.build}."
                    )

        input_options = [
            "-o",
            output_name,
        ]

        if inputs.region:
            input_options.extend(["--region", inputs.region])

        if inputs.advanced.min_read_length:
            input_options.extend(["--min-read-len", inputs.advanced.min_read_length])

        if inputs.advanced.min_mq:
            input_options.extend(["--min-MQ", inputs.advanced.min_mq])

        if inputs.advanced.min_bq:
            input_options.extend(["--min-BQ", inputs.advanced.min_bq])

        if inputs.advanced.excl_flags:
            flags = ",".join(inputs.advanced.excl_flags)
            input_options.extend(["--excl-flags", flags])

        if inputs.advanced.depth:
            input_options.extend(["--depth", inputs.advanced.depth])

        if inputs.advanced.no_header:
            input_options.append("--no-header")

        input_options.extend([bam.output.bam.path for bam in inputs.bam])

        return_code, stdout, stderr = Cmd["samtools"]["coverage"][input_options] & TEE(
            retcode=None
        )
        if return_code:
            self.error(f"Samtools coverage failed. {stdout}, {stderr}")

        outputs.table = output_name
        outputs.species = inputs.bam[0].output.species
        outputs.build = inputs.bam[0].output.build


class SamtoolsCoverageSingle(Process):
    """Samtools coverage for a single BAM file.

    Computes the depth at each position or region and creates tabulated text.

    For more information about samtools coverage, click
    [here](https://www.htslib.org/doc/samtools-coverage.html).
    """

    slug = "samtools-coverage-single"
    process_type = "data:samtoolscoverage:single"
    name = "Samtools coverage (single-sample)"
    requirements = {
        "expression-engine": "jinja",
        "executor": {
            "docker": {"image": "public.ecr.aws/genialis/resolwebio/rnaseq:6.0.0"},
        },
        "resources": {
            "cores": 2,
            "memory": 16384,
        },
    }
    category = "Samtools"
    data_name = "{{ bam|name|default('?') }}"
    version = "1.0.0"
    entity = {"type": "sample"}
    scheduling_class = SchedulingClass.BATCH

    class Input:
        """Input fields for SamtoolsCoverageSingle."""

        bam = DataField(
            data_type="alignment:bam",
            label="Input BAM file",
            description="Select BAM file for the analysis",
        )
        region = StringField(
            label="Region",
            description="Region can be specified as: RNAME:STARTPOS-ENDPOS "
            "and all position coordinates are 1-based, where RNAME is the "
            "name of the contig. If the input BAM file was generated by "
            "General RNA-seq pipeline, you should use only chromosome "
            "numbers to subset the input file, e.g. 3:30293-39103.",
            required=False,
        )

        class AdvancedOptions:
            """Advanced options."""

            min_read_length = IntegerField(
                label="Minimum read length",
                required=False,
                description="Ignore reads shorter than specified number of "
                "base pairs.",
            )
            min_mq = IntegerField(
                label="Minimum mapping quality",
                required=False,
                description="Minimum mapping quality for an alignment to be used.",
            )
            min_bq = IntegerField(
                label="Minimum base quality",
                required=False,
                description="Minimum base quality for a base to be considered.",
            )
            excl_flags = ListField(
                StringField(),
                label="Filter flags",
                default=["UNMAP", "SECONDARY", "QCFAIL", "DUP"],
                description="Filter flags: skip reads with mask bits set. "
                "Press ENTER after each flag.",
            )
            depth = IntegerField(
                label="Maximum allowed coverage depth",
                default=1000000,
                description="If 0, depth is set to the maximum integer value "
                "effectively removing any depth limit.",
            )
            no_header = BooleanField(
                label="No header",
                default=False,
                description="Do not output header.",
            )

        advanced = GroupField(AdvancedOptions, label="Advanced options")

    class Output:
        """Output fields for SamtoolsCoverageSingle."""

        table = FileField(label="Output coverage table")
        build = StringField(label="Build")
        species = StringField(label="Species")

    def run(self, inputs, outputs):
        """Run the analysis."""

        output_name = f"{Path(inputs.bam.output.bam.path).stem}_coverage.tsv"

        input_options = [
            "-o",
            output_name,
        ]

        if inputs.region:
            input_options.extend(["--region", inputs.region])

        if inputs.advanced.min_read_length:
            input_options.extend(["--min-read-len", inputs.advanced.min_read_length])

        if inputs.advanced.min_mq:
            input_options.extend(["--min-MQ", inputs.advanced.min_mq])

        if inputs.advanced.min_bq:
            input_options.extend(["--min-BQ", inputs.advanced.min_bq])

        if inputs.advanced.excl_flags:
            flags = ",".join(inputs.advanced.excl_flags)
            input_options.extend(["--excl-flags", flags])

        if inputs.advanced.depth:
            input_options.extend(["--depth", inputs.advanced.depth])

        if inputs.advanced.no_header:
            input_options.append("--no-header")

        input_options.append(inputs.bam.output.bam.path)

        return_code, stdout, stderr = Cmd["samtools"]["coverage"][input_options] & TEE(
            retcode=None
        )
        if return_code:
            self.error(f"Samtools coverage failed. {stdout}, {stderr}")

        outputs.table = output_name
        outputs.species = inputs.bam.output.species
        outputs.build = inputs.bam.output.build
