"""Samtools view."""

from pathlib import Path

from plumbum import TEE

from resolwe.process import (
    BooleanField,
    Cmd,
    DataField,
    FileField,
    FloatField,
    GroupField,
    IntegerField,
    Persistence,
    Process,
    SchedulingClass,
    StringField,
)


class SamtoolsView(Process):
    """Samtools view.

    With no options or regions specified, saves all alignments in
    the specified input alignment file in BAM format to standard output
    also in BAM format.

    You may specify one or more space-separated region specifications
    to restrict output to only those alignments which overlap the specified
    region(s). For more information about samtools view, click
    [here](https://www.htslib.org/doc/samtools-view.html).
    """

    slug = "samtools-view"
    process_type = "data:alignment:bam:samtools"
    name = "Samtools view"
    requirements = {
        "expression-engine": "jinja",
        "executor": {
            "docker": {"image": "public.ecr.aws/genialis/resolwebio/rnaseq:6.0.0"},
        },
        "resources": {
            "cores": 2,
            "memory": 16384,
        },
    }
    category = "Samtools"
    data_name = "{{ bam|name|default('?') }}"
    version = "1.0.2"
    entity = {"type": "sample"}
    scheduling_class = SchedulingClass.BATCH
    persistence = Persistence.CACHED

    class Input:
        """Input fields for SamtoolsView."""

        bam = DataField(data_type="alignment:bam", label="Input BAM file")
        region = StringField(
            label="Region",
            description="Region can be specified as: RNAME:STARTPOS-ENDPOS "
            "and all position coordinates are 1-based, where RNAME is the "
            "name of the contig. If the input BAM file was generated by "
            "General RNA-seq pipeline, you should use only chromosome "
            "numbers to subset the input file, e.g. 3:30293-39103.",
            hidden="bedfile",
            required=False,
        )
        bedfile = DataField(
            data_type="bed",
            label="Target BED file",
            description="Target BED file with regions to extract."
            "If the input BAM file was generated by General RNA-seq "
            "pipeline, you should use only chromosome numbers to subset "
            "the input file, e.g. 3:30292-39103.",
            hidden="region",
            required=False,
        )

        class AdvancedOptions:
            """Advanced options."""

            include_header = BooleanField(
                label="Include the header in the output",
                default=True,
                disabled="advanced.only_header",
            )
            only_header = BooleanField(
                label="Output the header only",
                default=False,
                disabled="advanced.include_header",
                description="Selecting this option overrides all other options.",
            )
            subsample = FloatField(
                label="Fraction of the input alignments",
                required=False,
                range=[0.0, 1.0],
                description="Output only a proportion of the input alignments, as "
                "specified by 0.0 â‰¤ FLOAT â‰¤ 1.0, which gives the fraction of "
                "templates/pairs to be kept. This subsampling acts in the same "
                "way on all of the alignment records in the same template or read "
                "pair, so it never keeps a read but not its mate.",
            )
            subsample_seed = IntegerField(
                label="Subsampling seed",
                default=11,
                description="Subsampling seed used to influence which subset of "
                "reads is kept. When subsampling data that has previously been "
                "subsampled, be sure to use a different seed value from those used "
                "previously; otherwise more reads will be retained than expected.",
                hidden="!advanced.subsample",
            )
            threads = IntegerField(
                label="Number of threads",
                default=2,
                description="Number of BAM compression threads to use in addition "
                "to main thread.",
            )

        advanced = GroupField(AdvancedOptions, label="Advanced options")

    class Output:
        """Output fields for SamtoolsView."""

        bam = FileField(label="Output BAM file")
        bai = FileField(label="Ouput index file")
        stats = FileField(label="Alignment statistics", required=False)
        build = StringField(label="Build")
        species = StringField(label="Species")

    def run(self, inputs, outputs):
        """Run the analysis."""

        name = f"{Path(inputs.bam.output.bam.path).stem}_subset"
        bam_name = f"{name}.bam"
        bai_name = f"{bam_name}.bai"
        stats = f"{name}_stats.txt"

        if not inputs.region and not inputs.bedfile and not inputs.advanced.only_header:
            self.error("No region or BED file specified.")

        if inputs.bedfile:
            if inputs.bedfile.output.species != inputs.bam.output.species:
                self.error(
                    "Input BAM file and BED file are of different species. "
                    f"BAM file is from {inputs.bam.output.species}, "
                    f"while BED file is from {inputs.bedfile.output.species}."
                )
            if inputs.bedfile.output.build != inputs.bam.output.build:
                self.error(
                    "Input BAM file and BED file have different genome build, "
                    "but it should be the same. BAM file has build "
                    f"{inputs.bam.output.build}, while BED file has build "
                    f"{inputs.bedfile.output.build}."
                )

        if inputs.advanced.only_header:
            return_code, stdout, stderr = Cmd["samtools"]["view"][
                "-Hbo", bam_name, inputs.bam.output.bam.path
            ] & TEE(retcode=None)
            if return_code:
                self.error(f"Samtools view failed. {stdout}, {stderr}")

            return_code, stdout, stderr = Cmd["samtools"]["index"][bam_name] & TEE(
                retcode=None
            )
            if return_code:
                self.error(f"Samtools index failed. {stdout}, {stderr}")

            self.warning("Only header is present in the output BAM file.")

        else:
            input_options = [
                "-b",
                "--threads",
                min(inputs.advanced.threads, self.requirements.resources.cores),
            ]

            if inputs.advanced.include_header:
                input_options.append("-h")

            if inputs.advanced.subsample:
                input_options.extend(
                    [
                        "--subsample",
                        inputs.advanced.subsample,
                        "--subsample-seed",
                        inputs.advanced.subsample_seed,
                    ]
                )

            if inputs.bedfile:
                input_options.extend(
                    [
                        "-L",
                        inputs.bedfile.output.bed.path,
                        "-o",
                        bam_name,
                        inputs.bam.output.bam.path,
                    ]
                )
            else:
                input_options.extend(
                    ["-o", bam_name, inputs.bam.output.bam.path, inputs.region]
                )

            return_code, stdout, stderr = Cmd["samtools"]["view"][input_options] & TEE(
                retcode=None
            )
            if return_code:
                self.error(f"Samtools view failed. {stdout}, {stderr}")
            if "invalid region or unknown reference" in stderr:
                self.warning(stderr)

            return_code, stdout, stderr = Cmd["samtools"]["index"][bam_name] & TEE(
                retcode=None
            )
            if return_code:
                self.error(f"Samtools index failed. {stdout}, {stderr}")

            (Cmd["samtools"]["flagstat"][bam_name] > stats)()

            outputs.stats = stats

        outputs.bam = bam_name
        outputs.bai = bai_name
        outputs.species = inputs.bam.output.species
        outputs.build = inputs.bam.output.build
