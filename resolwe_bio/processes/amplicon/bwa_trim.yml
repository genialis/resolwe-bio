# ==========================================
# Align reads and trimm resulting SAM output
# ==========================================
---

- slug: align-bwa-trim
  name: Align (BWA) and trim adapters
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/legacy:latest
    resources:
      memory: 32768
  data_name: "Alignment ({{ reads|sample_name|default('?') }})"
  version: 0.1.1
  type: data:alignment:bam:bwatrim
  category: analyses
  flow_collection: sample
  persistence: CACHED
  description: >
    Align with BWA mem and trim the sam output.
  input:
    - name: master_file
      label: Master file
      type: data:masterfile:amplicon
      description: >
        Amplicon experiment design file that holds the information about the primers to be removed.
    - name: genome
      label: Reference genome
      type: data:genome:fasta
    - name: reads
      label: Reads
      type: data:reads:fastq
    - name: seed_l
      label: Minimum seed length
      type: basic:integer
      default: 19
      description: >
        Minimum seed length. Matches shorter than minimum seed length will be missed. The alignment speed is usually insensitive to this value unless it significantly deviates 20.
    - name: band_w
      label: Band width
      type: basic:integer
      default: 100
      description: >
        Gaps longer than this will not be found.
    - name: re_seeding
      label: Re-seeding factor
      type: basic:decimal
      default: 1.5
      description: >
        Trigger re-seeding for a MEM longer than minSeedLen*FACTOR. This is a key heuristic parameter for tuning the performance. Larger value yields fewer seeds, which leads to faster alignment speed but lower accuracy.
    - name: m
      label: Mark shorter split hits as secondary
      type: basic:boolean
      default: false
      description: >
        Mark shorter split hits as secondary (for Picard compatibility)
    - name: scoring
      label: Scoring
      group:
      - name: match
        label: Score of a match
        type: basic:integer
        default: 1
      - name: missmatch
        label: Mismatch penalty
        type: basic:integer
        default: 4
      - name: gap_o
        label: Gap open penalty
        type: basic:integer
        default: 6
      - name: gap_e
        label: Gap extension penalty
        type: basic:integer
        default: 1
      - name: clipping
        label: Clipping penalty
        type: basic:integer
        default: 5
        description: >
          Clipping is applied if final alignment score is smaller than (best score reaching the end of query) - (Clipping penalty)
      - name: unpaired_p
        label: Penalty for an unpaired read pair
        type: basic:integer
        default: 9
        description: >
          Affinity to force pair. Score: scoreRead1+scoreRead2-Penalty
    - name: reporting
      label: Reporting
      group:
      - name: report_all
        label: Report all found alignments
        type: basic:boolean
        default: false
        description: >
          Output all found alignments for single-end or unpaired paired-end reads. These alignments will be flagged as secondary alignments.
      - name: report_tr
        label: Report threshold score
        type: basic:integer
        default: 30
        description: >
          Don't output alignment with score lower than defined number. This option only affects output.
    - name: threads
      label: Number of threads
      type: basic:integer
      default: 1
  output:
    - name: bam
      label: Alignment file
      type: basic:file
      description: Position sorted alignment
    - name: bai
      label: Index BAI
      type: basic:file
    - name: stats
      label: Statistics
      type: basic:file
    - name: ptrimlog
      label: Primer trimm log
      type: basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
      NAME={{ reads|sample_slug }}
      GENOME_NAME=`basename {{ genome.fasta.file }} .fasta`
      INDEX={{genome.index_bwa.dir}}"/${GENOME_NAME}.fasta"

      FW_READS=()
      RW_READS=()

      {% for r in reads.fastq %}
        FW_READS+=({{ r.file }})
      {% endfor %}

      cat "${FW_READS[@]}" > fw_reads.fastq.gz
      gzip -d fw_reads.fastq.gz

      {% if reads|type|subtype('data:reads:fastq:paired:') %}
        {% for r in reads.fastq2 %}
          RW_READS+=({{ r.file }})
        {% endfor %}
        cat "${RW_READS[@]}" > rw_reads.fastq.gz
        gzip -d rw_reads.fastq.gz
      {% endif %}

      re-progress 0.1

      echo "ALIGNING with BWA-MEM:"
      {% if reads|type|subtype('data:reads:fastq:single:') %}
        bwa \
          mem \
          {% if reporting.report_all %}-a{% endif %} \
          -r {{re_seeding}} \
          -k {{ seed_l }} \
          -w {{ band_w }} \
          -A {{scoring.match}} \
          -B {{scoring.missmatch}} \
          -O {{scoring.gap_o}} \
          -E {{scoring.gap_e}} \
          -L {{scoring.clipping}} \
          -T {{ reporting.report_tr }} \
          {% if m %}-M{% endif %} \
          -t {{threads}} \
          "${INDEX}" \
          fw_reads.fastq 1> "${NAME}_align_unsorted.sam"
      {% else %}
        bwa \
          mem \
          {% if reporting.report_all %}-a{% endif %} \
          -U {{scoring.unpaired_p}} \
          -r {{re_seeding}} \
          -k {{ seed_l }} \
          -w {{ band_w }} \
          -A {{scoring.match}} \
          -B {{scoring.missmatch}} \
          -O {{scoring.gap_o}} \
          -E {{scoring.gap_e}} \
          -L {{scoring.clipping}} \
          -T {{ reporting.report_tr }} \
          {% if m %}-M{% endif %} \
          -t {{threads}} \
          "${INDEX}" \
          fw_reads.fastq \
          rw_reads.fastq 1> "${NAME}_align_unsorted.sam"
      {% endif %}

      re-checkrc
      re-progress 0.5

      echo "trimming primers"
      primerclip \
        "${NAME}_align_unsorted.sam" \
        {{master_file.primers.file}} \
        "${NAME}_ptrimd.sam" 2> "${NAME}_ptrim.log"
      re-checkrc
      re-progress 0.7

      re-save-file ptrimlog "${NAME}_ptrim.log"

      echo "sorting and adding read groups"
      picard-tools \
        AddOrReplaceReadGroups \
        I="${NAME}_ptrimd.sam" \
        O="${NAME}_RG_temp.bam" \
        SO=coordinate \
        RGID=snpID \
        LB=swift \
        SM="${NAME}" \
        PL=illumina \
        PU=miseq
      re-checkrc
      re-progress 0.8

      # Fix the MD tag to correct for an issue with the primerclip
      samtools \
        calmd \
        -b "${NAME}_RG_temp.bam" \
        {{genome.fasta.file}} > "${NAME}_RG.bam" 2> /dev/null
      re-checkrc

      re-save-file bam "${NAME}_RG.bam"

      echo "Calculating statistics"
      samtools flagstat "${NAME}_RG.bam" > "${NAME}_report.txt"
      re-checkrc
      re-progress 0.85

      re-save-file stats "${NAME}_report.txt"

      echo "indexing bam file"
      samtools index "${NAME}_RG.bam"
      re-checkrc
      re-progress 0.95

      re-save-file bai "${NAME}_RG.bam.bai"

- slug: align-bwa-trim2
  name: Align (BWA) and trim adapters
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/dnaseq:1.1.0
    resources:
      memory: 16384
  data_name: "Alignment ({{ reads|sample_name|default('?') }})"
  version: 0.0.2
  type: data:alignment:bam:bwatrim
  category: analyses
  flow_collection: sample
  persistence: CACHED
  description: >
    Align with BWA mem and trim the sam output. The process uses the memory-optimized Primertrim tool.
  input:
    - name: master_file
      label: Master file
      type: data:masterfile:amplicon
      description: >
        Amplicon experiment design file that holds the information about the primers to be removed.
    - name: genome
      label: Reference genome
      type: data:genome:fasta
    - name: reads
      label: Reads
      type: data:reads:fastq
    - name: seed_l
      label: Minimum seed length
      type: basic:integer
      default: 19
      description: >
        Minimum seed length. Matches shorter than minimum seed length will be missed. The alignment speed is usually insensitive to this value unless it significantly deviates 20.
    - name: band_w
      label: Band width
      type: basic:integer
      default: 100
      description: >
        Gaps longer than this will not be found.
    - name: re_seeding
      label: Re-seeding factor
      type: basic:decimal
      default: 1.5
      description: >
        Trigger re-seeding for a MEM longer than minSeedLen*FACTOR. This is a key heuristic parameter for tuning the performance. Larger value yields fewer seeds, which leads to faster alignment speed but lower accuracy.
    - name: m
      label: Mark shorter split hits as secondary
      type: basic:boolean
      default: false
      description: >
        Mark shorter split hits as secondary (for Picard compatibility)
    - name: scoring
      label: Scoring
      group:
      - name: match
        label: Score of a match
        type: basic:integer
        default: 1
      - name: missmatch
        label: Mismatch penalty
        type: basic:integer
        default: 4
      - name: gap_o
        label: Gap open penalty
        type: basic:integer
        default: 6
      - name: gap_e
        label: Gap extension penalty
        type: basic:integer
        default: 1
      - name: clipping
        label: Clipping penalty
        type: basic:integer
        default: 5
        description: >
          Clipping is applied if final alignment score is smaller than (best score reaching the end of query) - (Clipping penalty)
      - name: unpaired_p
        label: Penalty for an unpaired read pair
        type: basic:integer
        default: 9
        description: >
          Affinity to force pair. Score: scoreRead1+scoreRead2-Penalty
    - name: reporting
      label: Reporting
      group:
      - name: report_all
        label: Report all found alignments
        type: basic:boolean
        default: false
        description: >
          Output all found alignments for single-end or unpaired paired-end reads. These alignments will be flagged as secondary alignments.
      - name: report_tr
        label: Report threshold score
        type: basic:integer
        default: 30
        description: >
          Don't output alignment with score lower than defined number. This option only affects output.
    - name: threads
      label: Number of threads
      type: basic:integer
      default: 1
  output:
    - name: bam
      label: Alignment file
      type: basic:file
      description: Position sorted alignment
    - name: bai
      label: Index BAI
      type: basic:file
    - name: stats
      label: Statistics
      type: basic:file
    - name: ptrimlog
      label: Primer trimm log
      type: basic:file
      required: false
  run:
    runtime: polyglot
    language: bash
    program: |
      NAME={{ reads|sample_slug }}
      GENOME_NAME=`basename {{ genome.fasta.file }} .fasta`
      INDEX={{genome.index_bwa.dir}}"/${GENOME_NAME}.fasta"

      FW_READS=()
      RW_READS=()

      {% for r in reads.fastq %}
        FW_READS+=({{ r.file }})
      {% endfor %}

      cat "${FW_READS[@]}" > fw_reads.fastq.gz
      gzip -d fw_reads.fastq.gz

      {% if reads|type|subtype('data:reads:fastq:paired:') %}
        {% for r in reads.fastq2 %}
          RW_READS+=({{ r.file }})
        {% endfor %}
        cat "${RW_READS[@]}" > rw_reads.fastq.gz
        gzip -d rw_reads.fastq.gz
      {% endif %}

      re-progress 0.1

      echo "ALIGNING with BWA-MEM:"
      {% if reads|type|subtype('data:reads:fastq:single:') %}
        bwa \
          mem \
          {% if reporting.report_all %}-a{% endif %} \
          -r {{re_seeding}} \
          -k {{ seed_l }} \
          -w {{ band_w }} \
          -A {{scoring.match}} \
          -B {{scoring.missmatch}} \
          -O {{scoring.gap_o}} \
          -E {{scoring.gap_e}} \
          -L {{scoring.clipping}} \
          -T {{ reporting.report_tr }} \
          {% if m %}-M{% endif %} \
          -t {{threads}} \
          "${INDEX}" \
          fw_reads.fastq 1> "${NAME}_align_unsorted.sam"
      {% else %}
        bwa \
          mem \
          {% if reporting.report_all %}-a{% endif %} \
          -U {{scoring.unpaired_p}} \
          -r {{re_seeding}} \
          -k {{ seed_l }} \
          -w {{ band_w }} \
          -A {{scoring.match}} \
          -B {{scoring.missmatch}} \
          -O {{scoring.gap_o}} \
          -E {{scoring.gap_e}} \
          -L {{scoring.clipping}} \
          -T {{ reporting.report_tr }} \
          {% if m %}-M{% endif %} \
          -t {{threads}} \
          "${INDEX}" \
          fw_reads.fastq \
          rw_reads.fastq 1> "${NAME}_align_unsorted.sam"
      {% endif %}

      re-checkrc
      re-progress 0.5

      picard-tools \
        SortSam \
        I="${NAME}_align_unsorted.sam" \
        O="${NAME}_align_sorted.sam" \
        SO=coordinate
      re-checkrc

      echo "trimming primers"
      primerclip \
        "${NAME}_align_sorted.sam" \
        {{master_file.master_file.file}} \
        "${NAME}_ptrimd.sam" 2> "${NAME}_ptrim.log"
      re-checkrc
      re-progress 0.7

      if [ -s "${NAME}_ptrim.log" ]
      then
        re-save-file ptrimlog "${NAME}_ptrim.log"
      fi

      echo "sorting and adding read groups"
      picard-tools \
        AddOrReplaceReadGroups \
        I="${NAME}_ptrimd.sam" \
        O="${NAME}_RG_temp.bam" \
        SO=coordinate \
        RGID=snpID \
        RGLB=accelAmp \
        SM="${NAME}" \
        RGPL=illumina \
        RGPU=Miseq \
        VALIDATION_STRINGENCY=LENIENT
      re-checkrc
      re-progress 0.8

      # Fix the MD tag to correct for an issue with the primerclip
      samtools \
        calmd \
        -b "${NAME}_RG_temp.bam" \
        {{ genome.fasta.file }} > "${NAME}_RG.bam" 2> /dev/null
      re-checkrc

      re-save-file bam "${NAME}_RG.bam"

      echo "Calculating statistics"
      samtools flagstat "${NAME}_RG.bam" > "${NAME}_report.txt"
      re-checkrc
      re-progress 0.85

      re-save-file stats "${NAME}_report.txt"

      echo "indexing bam file"
      samtools index "${NAME}_RG.bam"
      re-checkrc
      re-progress 0.95

      re-save-file bai "${NAME}_RG.bam.bai"
