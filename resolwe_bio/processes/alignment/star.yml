# ==============
# Aligner - STAR
# ==============
---

- slug: alignment-star
  name: STAR (2.4.2a)
  data_name: "Alignment ({{ reads.fastq.0.file|basename|default:'?' }})"
  version: 1.0.6
  type: data:alignment:bam:star
  category: analyses:alignment
  flow_collection: sample
  persistence: CACHED
  description: >
    Spliced Transcripts Alignment to a Reference
  input:
    - name: genome
      label: Indexed reference genome
      type: data:genomeindex:star
      description: >
        Genome index prepared by STAR aligner indexing tool.
    - name: reads
      label: Reads
      type: data:reads:fastq
    - name: threads
      label: Use this many processor threads
      type: basic:integer
      default: 1
      description: >
        Number of processor threads to be used when mapping reads to the reference sequence.
    - name: unstranded
      label: The data is unstranded
      type: basic:boolean
      default: false
      description: >
        For unstranded RNA-seq data, Cufflinks/Cuffdiff require spliced alignments with XS strand attribute, which STAR will generate with --outSAMstrandField intronMotif option. As required, the XS strand attribute will be generated for all alignments that contain splice junctions. The spliced alignments that have undefined strand (i.e. containing only non-canonical unannotated junctions) will be suppressed. If you have stranded RNA-seq data, you do not need to use any specific STAR options. Instead, you need to run Cufflinks with the library option --library-type options. For example, cufflinks --library-type fr-firststrand should be used for the standard dUTP protocol, including Illumina's stranded Tru-Seq. This option has to be used only for Cufflinks runs and not for STAR runs.
    - name: noncannonical
      label: Remove non-cannonical junctions (Cufflinks compatibility)
      type: basic:boolean
      default: false
      description: >
        It is recommended to remove the non-canonical junctions for Cufflinks runs using --outFilterIntronMotifs RemoveNoncanonical.
    - name: detect_chimeric
      label: Detect chimeric and circular alignments
      group:
        - name: chimeric
          label: Detect chimeric and circular alignments
          type: basic:boolean
          default: false
          description: >
            To switch on detection of chimeric (fusion) alignments (in addition to normal mapping), --chimSegmentMin should be set to a positive value. Each chimeric alignment consists of two "segments". Each segment is non-chimeric on its own, but the segments are chimeric to each other (i.e. the segments belong to different chromosomes, or different strands, or are far from each other). Both segments may contain splice junctions, and one of the segments may contain portions of both mates. --chimSegmentMin parameter controls the minimum mapped length of the two segments that is allowed. For example, if you have 2x75 reads and used --chimSegmentMin 20, a chimeric alignment with 130b on one chromosome and 20b on the other will be output, while 135 + 15 won't be.
        - name: chimSegmentMin
          label: --chimSegmentMin
          type: basic:integer
          default: 20
          disabled: "detect_chimeric.chimeric != true"
    - name: t_coordinates
      label: Output in transcript coordinates
      group:
        - name: quantmode
          label: Output in transcript coordinates
          type: basic:boolean
          default: false
          description: >
            With --quantMode TranscriptomeSAM option STAR will output alignments translated into transcript coordinates in the Aligned.toTranscriptome.out.bam file (in addition to alignments in genomic coordinates in Aligned.*.sam/bam files). These transcriptomic alignments can be used with various transcript quantification software that require reads to be mapped to transcriptome, such as RSEM or eXpress.
        - name: singleend
          label: Allow soft-clipping and indels
          type: basic:boolean
          default: false
          disabled: "t_coordinates.quantmode != true"
          description: >
            By default, the output satisfies RSEM requirements: soft-clipping or indels are not allowed. Use --quantTranscriptomeBan Singleend to allow insertions, deletions ans soft-clips in the transcriptomic alignments, which can be used by some expression quantification software (e.g. eXpress).
        - name: gene_counts
          label: Count reads
          type: basic:boolean
          default: false
          disabled: "t_coordinates.quantmode != true"
          description: >
            With --quantMode GeneCounts option STAR will count number reads per gene while mapping. A read is counted if it overlaps (1nt or more) one and only one gene. Both ends of the paired-end read are checked for overlaps. The counts coincide with those produced by htseq-count with default parameters. ReadsPerGene.out.tab file with 4 columns which correspond to different strandedness options: column 1: gene ID; column 2: counts for unstranded RNA-seq; column 3: counts for the 1st read strand aligned with RNA (htseq-count option -s yes); column 4: counts for the 2nd read strand aligned with RNA (htseq-count option -s reverse).
    - name: filtering
      label: Output Filtering
      group:
        - name: outFilterType
          label: Type of filtering
          type: basic:string
          default: Normal
          description: >
            Normal: standard filtering using only current alignment; BySJout: keep only those reads that contain junctions that passed filtering into SJ.out.tab
          choices:
            - label: Normal
              value: Normal
            - label: BySJout
              value: BySJout
        - name: outFilterMultimapNmax
          label: --outFilterMultimapNmax
          type: basic:integer
          required: false
          description: >
            Read alignments will be output only if the read maps fewer than this value, otherwise no alignments will be output (default: 10).
        - name: outFilterMismatchNmax
          label: --outFilterMismatchNmax
          type: basic:integer
          required: false
          description: >
            Alignment will be output only if it has fewer mismatches than this value (default: 10).
    - name: alignment
      label: Alignment and Seeding
      group:
        - name: alignSJoverhangMin
          label: --alignSJoverhangMin
          type: basic:integer
          required: false
          description: >
            Minimum overhang (i.e. block size) for spliced alignments (default: 5).
        - name: alignSJDBoverhangMin
          label: --alignSJDBoverhangMin
          type: basic:integer
          required: false
          description: >
            Minimum overhang (i.e. block size) for annotated (sjdb) spliced alignments (default: 3).
        - name: alignIntronMin
          label: --alignIntronMin
          type: basic:integer
          required: false
          description: >
            Minimum intron size: genomic gap is considered intron if its length >= alignIntronMin, otherwise it is considered Deletion (default: 21).
        - name: alignIntronMax
          label: --alignIntronMax
          type: basic:integer
          required: false
          description: >
            Maximum intron size, if 0, max intron size will be determined by (2pow(winBinNbits)*winAnchorDistNbins) (default: 0).
        - name: alignMatesGapMax
          label: --alignMatesGapMax
          type: basic:integer
          required: false
          description: >
            Maximum gap between two mates, if 0, max intron gap will be determined by (2pow(winBinNbits)*winAnchorDistNbins) (default: 0).
  output:
    - name: bam
      label: Alignment file
      type: basic:file
      description: Position sorted alignment
    - name: bai
      label: Index BAI
      type: basic:file
    - name: unmapped_f
      label: Unmapped reads (mate 1)
      type: basic:file
      required: false
    - name: unmapped_r
      label: Unmapped reads (mate 2)
      type: basic:file
      required: false
    - name: sj
      label: Splice junctions
      type: basic:file
    - name: chimeric
      label: Chimeric alignments
      type: basic:file
      required: false
    - name: alignment_transcriptome
      label: Alignment (trancriptome coordinates)
      type: basic:file
      required: false
    - name: gene_counts
      label: Gene counts
      type: basic:file
      required: false
    - name: stats
      label: Statistics
      type: basic:file
  run:
    runtime: polyglot
    bash: |
      READS_NAME=`basename '{{ reads.fastq.0.file }}' .fastq.gz`
      INDEX="{{genome.index.dir}}"

      {% for r in reads.fastq %}
        FW_READS=${FW_READS}"{{ r.file }} "
      {% endfor %}

      cat ${FW_READS} > fw_reads.fastq.gz

      {% if reads|type|subtype:'data:reads:fastq:paired:' %}
        {% for r in reads.fastq2 %}
          READS_NAME=`basename '{{ r.file }}' .fastq.gz`
          RW_READS=${RW_READS}"{{ r.file }} "
        {% endfor %}
        cat ${RW_READS} > rw_reads.fastq.gz
      {% endif %}

      re-progress 0.05

      {% if reads|type|subtype:'data:reads:fastq:single:' %}
        STAR --runThreadN '{{threads}}' --genomeDir ${INDEX} --readFilesIn fw_reads.fastq.gz --readFilesCommand zcat --outSAMtype BAM SortedByCoordinate --outReadsUnmapped Fastx {% if unstranded %} --outSAMstrandField intronMotif {% endif %} {% if noncannonical %} --outFilterIntronMotifs RemoveNoncanonical {% endif %} {% if detect_chimeric.chimeric %}  --chimSegmentMin '{{detect_chimeric.chimSegmentMin}}' {% endif %} {% if t_coordinates.quantmode %}  --quantMode TranscriptomeSAM {% if t_coordinates.gene_counts %} GeneCounts {% endif %} {% if t_coordinates.singleend %} --quantTranscriptomeBan Singleend {% endif %} {% endif %} --outFilterType '{{ filtering.outFilterType }}' {% if filtering.outFilterMultimapNmax %} --outFilterMultimapNmax '{{filtering.outFilterMultimapNmax}}' {% endif %} {% if filtering.outFilterMismatchNmax %} --outFilterMismatchNmax '{{filtering.outFilterMismatchNmax}}' {% endif %} {% if alignment.alignSJoverhangMin %} --alignSJoverhangMin '{{alignment.alignSJoverhangMin}}' {% endif %} {% if alignment.alignSJDBoverhangMin %} --alignSJDBoverhangMin '{{alignment.alignSJDBoverhangMin}}' {% endif %} {% if alignment.alignIntronMin %} --alignIntronMin '{{alignment.alignIntronMin}}' {% endif %} {% if alignment.alignIntronMax %} --alignIntronMax '{{alignment.alignIntronMax}}' {% endif %} {% if alignment.alignMatesGapMax %} --alignMatesGapMax '{{alignment.alignMatesGapMax}}' {% endif %}
        re-checkrc "Reads alignment failed!"

      if [ -f Unmapped.out.mate1 ]
      then
        mv Unmapped.out.mate1 ${READS_NAME}_unmapped.out.mate1.fastq
        gzip ${READS_NAME}_unmapped.out.mate1.fastq
        re-save-file unmapped_f ${READS_NAME}_unmapped.out.mate1.fastq.gz
      fi

      {% else %}
        STAR --runThreadN '{{ threads }}' --genomeDir ${GENOME_PATH} --readFilesIn fw_reads.fastq.gz rw_reads.fastq.gz --readFilesCommand zcat --outSAMtype BAM SortedByCoordinate --outReadsUnmapped Fastx {% if unstranded %} --outSAMstrandField intronMotif {% endif %} {% if noncannonical %} --outFilterIntronMotifs RemoveNoncanonical {% endif %} {% if detect_chimeric.chimeric %}  --chimSegmentMin '{{detect_chimeric.chimSegmentMin}}' {% endif %} {% if t_coordinates.quantmode %}  --quantMode TranscriptomeSAM {% if t_coordinates.gene_counts %} GeneCounts {% endif %} {% if t_coordinates.singleend %} --quantTranscriptomeBan Singleend {% endif %} {% endif %} --outFilterType '{{filtering.outFilterType}}' {% if filtering.outFilterMultimapNmax %} --outFilterMultimapNmax '{{filtering.outFilterMultimapNmax}}' {% endif %} {% if filtering.outFilterMismatchNmax %} --outFilterMismatchNmax '{{filtering.outFilterMismatchNmax}}' {% endif %} {% if alignment.alignSJoverhangMin %} --alignSJoverhangMin '{{alignment.alignSJoverhangMin}}' {% endif %} {% if alignment.alignSJDBoverhangMin %} --alignSJDBoverhangMin '{{alignment.alignSJDBoverhangMin}}' {% endif %} {% if alignment.alignIntronMin %} --alignIntronMin '{{alignment.alignIntronMin}}' {% endif %} {% if alignment.alignIntronMax %} --alignIntronMax '{{alignment.alignIntronMax}}' {% endif %} {% if alignment.alignMatesGapMax %} --alignMatesGapMax '{{alignment.alignMatesGapMax}}' {% endif %}
        re-checkrc "Reads alignment failed!"

      if [ -f Unmapped.out.mate1 ]
      then
        mv Unmapped.out.mate1 ${READS_NAME}_unmapped.out.mate1.fastq
        gzip ${READS_NAME}_unmapped.out.mate1.fastq
        re-save-file unmapped_f ${READS_NAME}_unmapped.out.mate1.fastq.gz
      fi

      if [ -f Unmapped.out.mate2 ]
      then
        mv Unmapped.out.mate2 ${READS_NAME}_unmapped.out.mate2.fastq
        gzip ${READS_NAME}_unmapped.out.mate2.fastq
        re-save-file unmapped_r ${READS_NAME}_unmapped.out.mate2.fastq
      fi

      {% endif %}

      re-progress 0.8
      samtools index Aligned.sortedByCoord.out.bam ${READS_NAME}.bam.bai
      re-checkrc
      re-progress 0.9

      {% if detect_chimeric.chimeric %}
        mv Chimeric.out.sam ${READS_NAME}_chimeric.out.sam
        re-save-file chimeric ${READS_NAME}_chimeric.out.sam
      {% endif %}

      {% if t_coordinates.quantmode %}
        mv Aligned.toTranscriptome.out.bam ${READS_NAME}_aligned.toTranscriptome.out.bam
        re-save-file alignment_transcriptome ${READS_NAME}_aligned.toTranscriptome.out.bam
      {% endif %}

      {% if t_coordinates.gene_counts %}
        mv ReadsPerGene.out.tab ${READS_NAME}.tab
        gzip ${READS_NAME}.tab
        re-save-file gene_counts ${READS_NAME}.tab.gz
        cp ${READS_NAME}.tab.gz ${READS_NAME}_1.tab.gz
        cp ${READS_NAME}.tab.gz ${READS_NAME}_2.tab.gz
        cp ${READS_NAME}.tab.gz ${READS_NAME}_3.tab.gz
        re-export ${READS_NAME}_1.tab.gz
        re-export ${READS_NAME}_2.tab.gz
        re-export ${READS_NAME}_3.tab.gz
        echo 'run {"process":"upload-expression-star","input":{"rc":'\"${READS_NAME}_1.tab.gz\"',"stranded":"no"}}'
        echo 'run {"process":"upload-expression-star","input":{"rc":'\"${READS_NAME}_2.tab.gz\"',"stranded":"yes"}}'
        echo 'run {"process":"upload-expression-star","input":{"rc":'\"${READS_NAME}_3.tab.gz\"',"stranded":"reverse"}}'
      {% endif %}

      mv Aligned.sortedByCoord.out.bam ${READS_NAME}.bam
      mv Log.final.out ${READS_NAME}_stats.txt
      mv SJ.out.tab ${READS_NAME}_SJ.out.tab

      re-save-file bam ${READS_NAME}.bam
      re-save-file bai ${READS_NAME}.bam.bai
      re-save-file sj ${READS_NAME}_SJ.out.tab
      re-save-file stats ${READS_NAME}_stats.txt


- slug: alignment-star-index
  name: STAR genome index (2.4.2a)
  data_name: "STAR genome index ({{ genome.fasta.file|basename|default:'?' }})"
  version: 1.0.4
  type: data:genomeindex:star
  persistence: CACHED
  description: >
    Generate genome indices files from the supplied reference genome sequence and annotation (GTF) files.
  input:
    - name: genome
      label: Reference genome
      type: data:genome:fasta
    - name: annotation
      label: Annotation file (GTF/GFF3)
      type: data:annotation
    - name: sjdbOverhang
      label: Junction length (sjdbOverhang)
      type: basic:integer
      default: 100
      description: >
        This parameter specifies the length of the genomic sequence around the annotated junction to be used in constructing the splice junction database. Ideally, this length should be equal to the ReadLength-1, where ReadLength is the length of the reads. For instance, for Illumina 2x100b paired-end reads, the ideal value is 100-1=99. In case of reads of varying length, the ideal value is max(ReadLength)-1. In most cases, the default value of 100 will work as well as the ideal value
    - name: threads
      label: Use this many processor threads
      type: basic:integer
      default: 1
      description: >
        Number of threads to be used for genome index generation.
    - name: annotation_options
      label: Annotation file options
      group:
        - name: exon_name
          label: --sjdbGTFfeatureExon
          type: basic:string
          default: exon
          description: >
            Feature type in GTF file to be used as exons for building transcripts.
    - name: advanced
      label: Advanced options
      group:
        - name: genomeSAindexNbases
          label: Small genome adjustment
          type: basic:integer
          required: false
          description: >
            For small genomes, the parameter --genomeSAindexNbases needs to be scaled down, with a typical value of min(14, log2(GenomeLength)/2 - 1). For example, for 1 megaBase genome, this is equal to 9, for 100 kiloBase genome, this is equal to 7.
        - name: genomeChrBinNbits
          label: Large number of references adjustment
          type: basic:integer
          required: false
          description: >
            If you are using a genome with a large (>5,000) number of references (chrosomes/scaffolds), you may need to reduce the --genomeChrBinNbits to reduce RAM consumption. The following scaling is recommended: --genomeChrBinNbits = min(18, log2(GenomeLength / NumberOfReferences)). For example, for 3 gigaBase genome with 100,000 chromosomes/scaffolds, this is equal to 15.
        - name: genomeSAsparseD
          label: Sufflux array sparsity
          type: basic:integer
          required: false
          description: >
            Suffux array sparsity, i.e. distance between indices: use bigger numbers to decrease needed RAM at the cost of mapping speed reduction (integer > 0, default = 1).
  output:
    - name: index
      label: Indexed genome
      type: basic:dir
  run:
    runtime: polyglot
    bash: |
      gzip -dc {{ genome.fasta.file }} > genome.fasta
      re-progress 0.1
      mkdir star_index
      STAR --runThreadN {{ threads }} --runMode genomeGenerate {% if advanced.genomeSAindexNbases %} --genomeSAindexNbases {{ advanced.genomeSAindexNbases }} {% endif %} {% if advanced.genomeChrBinNbits %} --genomeChrBinNbits  {{ advanced.genomeChrBinNbits }} {% endif %} {% if advanced.genomeSAsparseD %} --genomeSAsparseD {{ advanced.genomeSAsparseD }} {% endif %} --genomeDir ./star_index/ --genomeFastaFiles genome.fasta --sjdbGTFfile {% if annotation.gtf.file %} {{ annotation.gtf.file }} {% else %} {{annotation.gff.file}} --sjdbGTFtagExonParentTranscript Parent {% endif %} --sjdbOverhang {{ sjdbOverhang }} --sjdbGTFfeatureExon {{ annotation_options.exon_name }}
      re-checkrc "Genome index build failed."
      re-progress 0.8
      re-save-dir index star_index
