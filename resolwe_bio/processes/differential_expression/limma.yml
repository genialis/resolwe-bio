# =================================================
# Differential Expression - Limma (microarray data)
# =================================================
#
---

- slug: differentialexpression-limma
  name: Limma
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/legacy:latest
  data_name: 'Differential expression (case vs. control)'
  version: 1.1.2
  type: data:differentialexpression:limma
  category: analyses
  persistence: CACHED
  description: >
    Find differentially expressed genes.
  input:
    - name: case
      label: Case
      type: list:data:expression
      description: >
        Case samples (replicates)
    - name: control
      label: Control
      type: list:data:expression
      description: >
        Control samples (replicates)
  output:
    - name: raw
      label: Differential expression
      type: basic:file
    - name: de_json
      label: Results table (JSON)
      type: basic:json
    - name: de_file
      label: Results table (file)
      type: basic:file
    - name: source
      label: Gene ID database
      type: basic:string
    - name: species
      label: Species
      type: basic:string
    - name: build
      label: Build
      type: basic:string
    - name: feature_type
      label: Feature type
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      controls=()
      control_vector=()
      cases=()
      case_vector=()

      # TODO: This should be made available in common runtime.
      function join_by { local IFS="$1"; shift; echo "$*"; }

      {% for c in control %}
        controls+=({{c.exp.file}})
        control_vector+=('1')
        case_vector+=('0')
      {% endfor %}

      {% for t in case %}
        {% if t not in control %}
          cases+=({{t.exp.file}})
          control_vector+=('0')
          case_vector+=('1')
        {% else %}
          re-error "DE analysis failed. Case and Control groups must contain unique samples."
        {% endif %}
      {% endfor %}

      {% for c in control %}
        {% for t in case %}
          {% if c.source != t.source %}
            re-warning "Genes in all expression data must be annotated by the same genome database."
            re-error "Sample {{ c|name }} has {{ c.source }} gene IDs, while {{ t|name }} has {{ t.source }} gene IDs."
          {% endif %}
        {% endfor %}
      {% endfor %}

      control_vector=$(join_by , "${control_vector[@]}")
      case_vector=$(join_by , "${case_vector[@]}")

      sample_files=("${controls[@]}" "${cases[@]}")

      re-progress 0.1

      expressionmerge.py "${sample_files[@]}" --experiments "${sample_files[@]}" --intersection --out 'counts.tab'
      re-checkrc "Error merging expression data."

      run_limma.R counts.tab --control "${control_vector}" --case "${case_vector}" --out diffexp_limma.tab
      re-checkrc "Error computing differential expression (limma)."

      re-progress 0.95

      parse_diffexp.py 'diffexp_limma.tab' de_data.json de_file.tab.gz --gene_id gene_id --fdr adj.P.Val --pvalue P.Value --logfc logFC --logodds B --stat t
      re-checkrc

      gzip 'diffexp_limma.tab'
      re-save de_json de_data.json
      re-save-file raw diffexp_limma.tab.gz
      re-save-file de_file de_file.tab.gz
      re-save source {{ (case|first).source }}
      re-save species {{ (case|first).species }}
      re-save build {{ (case|first).build }}
      re-save feature_type {{ (case|first).feature_type }}
