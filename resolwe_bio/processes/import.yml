# =============================
# Processors for importing data
# =============================
#
# Processors for importing/uploading data formats and handling them accordingly.
---

- name: import:upload:genome-fasta
  version: 1.0.18
  label: Upload genome
  type: "data:genome:fasta:"
  category: upload
  persistence: RAW
  description: >
    Upload genome sequence in FASTA format.
  input:
    - name: src
      label: Genome sequence (FASTA)
      type: basic:file
      description: >
        Genome sequence in FASTA format. Supported extensions: .fasta.gz (preferred), .fa.*, .fna.* or .fasta.*
      required: true
      validate_regex: '\.(fasta|fa|fna|fsa)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
  output:
    - name: fasta
      label: Uploaded file
      type: basic:file
    - name: index_bt
      label: Bowtie index
      type: basic:file
    - name: index_bt2
      label: Bowtie2 index
      type: basic:file
    - name: index_bwa
      label: BWA index
      type: basic:file
    - name: twobit
      label: 2bit genome file
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: '{{ src.file|default:"?" }} (Upload)'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['genome', 'FASTA']
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ src.file|default:"?" }} genome upload.'
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      gen-require common
      gen-require bowtie-1.0.0
      gen-require bowtie2-2.2.3
      gen-require bwa-0.7.5a
      gen-require jbrowse-1.11.4/bin

      gen-import "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "fasta|fa|fna|fsa" "fasta" 0.5

      # If last line empty, remove this line from a FASTA file. Improves Cufflinks compatibility.
      if [ "$(tail -n 1 "${NAME}.fasta")" == "" ]; then
        echo "Removing empty line at the end of FASTA file."
        sed -i '$ d' ${NAME}.fasta
        rm "${NAME}.fasta.gz"
        gzip -c "${NAME}.fasta" > "${NAME}.fasta.gz"
      fi

      gen-save-file fasta "${NAME}.fasta.gz"

      mkdir bowtie_index
      bowtie-build "${NAME}.fasta" "bowtie_index/${NAME}_index"
      tar cfz "${NAME}_bt_index.tar.gz" ./bowtie_index/*.ebwt
      gen-save proc.rc $?
      gen-save proc.progress 0.6
      gen-save-file index_bt "${NAME}_bt_index.tar.gz"

      mkdir bowtie2_index
      bowtie2-build "$NAME.fasta" "bowtie2_index/${NAME}_index"
      tar cfz "${NAME}_bt2_index.tar.gz" ./bowtie2_index/*.bt2
      gen-save proc.rc $?
      gen-save proc.progress 0.7
      gen-save-file index_bt2 "${NAME}_bt2_index.tar.gz"

      mkdir BWA_index
      bwa index -p "BWA_index/${NAME}.fasta" "$NAME.fasta"
      tar cfz "${NAME}_bwa_index.tar.gz" ./BWA_index/*
      gen-save proc.rc $?
      gen-save proc.progress 0.9
      gen-save-file index_bwa "${NAME}_bwa_index.tar.gz"

      echo -e "\nPostprocessing JBrowse...\n"
      prepare-refseqs.pl --fasta "${NAME}.fasta.gz" --out .
      gen-save proc.rc $?
      gen-save-file fasta "${NAME}.fasta.gz" seq seq/refSeqs.json

      # Required for BioDalliance browser
      # Do not use gzipped fasta as it fails if trailing garbage in gzipped file
      # {{proc.slugs_path}}/kentUtils-2.9.1/faToTwoBit "${NAME}.fasta" "${NAME}.2bit"
      # gen-save proc.rc $?
      # gen-save-file twobit "${NAME}.2bit"

- name: import:upload:reads-fastq
  version: 1.0.16
  label: Upload NGS reads
  type: data:reads:fastq:single
  category: upload
  persistence: RAW
  description: >
    Upload NGS reads in FASTQ format.
  input:
    - name: src
      label: NGS reads (FASTQ)
      type: basic:file
      description: >
        NGS reads in FASTQ format. Supported extensions: .fastq.gz (preferred), .fq.* or .fastq.*
      required: true
      validate_regex: '(\.(fastq|fq)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$'
  output:
    - name: fastq
      label: Reads file
      type: basic:file
    - name: number
      label: Number of reads
      type: basic:integer
    - name: bases
      label: Number of bases
      type: basic:string
    - name: fastqc_url
      label: Quality control with FastQC
      type: basic:url:view
    - name: fastqc_archive
      label: Download FastQC archive
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: '{{ src.file|default:"?" }} (Upload)'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['reads', 'FASTQ']
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ src.file|default:"?" }} reads upload.'
  var:
    - name: experiment
      label: Experiment
      type: basic:string
    - name: experimenter
      label: Experimenter
      type: basic:string
    - name: notes
      label: Notes
      type: basic:text
    - name: sample
      label: Biological sample
      group:
        - name: genotype
          label: Genotype
          type: basic:string
          default: "wildtype"
        - name: treatment
          label: Treatment
          type: basic:string
        - name: strain
          label: Strain
          type: basic:string
        - name: growth
          label: Growth
          type: basic:string
        - name: time
          label: Time point
          type: basic:integer
          default: 0
    - name: replicate
      label: Biological replicates
      group:
        - name: replicate
          label: Replicate
          type: basic:integer
          default: 1
    - name: seqrun
      label: Seq-Run information
      group:
        - name: adapter
          label: Adapter type
          type: basic:string
        - name: center
          label: Sequencing center
          type: basic:string
        - name: fragmenting
          label: Fragmenting
          type: basic:string
        - name: purified
          label: Purified band
          type: basic:string
    - name: rnaseq
      label: RNA-seq information
      group:
        - name: polya
          label: PolyA selection
          type: basic:string
        - name: primer
          label: Primer
          type: basic:string
    - name: chipseq
      label: ChIP-seq information
      group:
        - name: target
          label: Target protein
          type: basic:string
        - name: antibody
          label: Antibody
          type: basic:string
        - name: control
          label: Sample control
          type: basic:string
  run:
    runtime: polyglot
    bash: |

      gen-require common
      gen-require fastqc-0.11.3

      gen-import "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "fastq|fq|bz2" "fastq" 0.5 "extract"

      #detect and if old Illumina encoding is found transform to new format
      fastqFormatDetect.pl ${NAME}.fastq &> encoding.txt
      if [[ $(grep 'Solexa/Illumina1.3+/Illumina1.5+' "encoding.txt") ]]
      then
        sed -i -e '4~4y/@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghi/!"#$%&'\''()*+,-.\/0123456789:;<=>?@ABCDEFGHIJ/' "${NAME}.fastq"
      fi

      gzip -c ${NAME}.fastq > ${NAME}.fastq.gz
      gen-save-file fastq ${NAME}.fastq.gz

      echo "Postprocessing FastQC..."
      mkdir "fastqc" && fastqc "${NAME}.fastq" --extract --outdir="fastqc" 2> stderr.txt
      gen-checkrc "Failed while processing with FastQC."
      if [[ $(grep --text "Failed to process file" stderr.txt) != "" ]]
      then
        gen-error "Failed while processing with FastQC."
      fi
      gen-progress 0.9

      BASES=$(awk '/^Sequence length/ {print $3}' fastqc/*_fastqc/fastqc_data.txt)
      NUMBER=`sed -ne 's/^Total Sequences\s*\([0-9\.]\+\)\s*$/\1/pi' fastqc/*_fastqc/fastqc_data.txt | head -n 1`
      FASTQC_URL="{\"name\":\"View\",\"url\":\"fastqc/${NAME}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME}_fastqc\"]}"
      mv "fastqc/${NAME}_fastqc.zip" .

      gen-save-file fastqc_archive ${NAME}_fastqc.zip
      gen-save number $NUMBER
      gen-save bases "\"$BASES\""
      gen-save fastqc_url $FASTQC_URL



- name: import:upload:reads-fastq-paired-end
  version: 1.0.16
  label: Upload paired-end NGS reads
  type: data:reads:fastq:paired
  category: upload
  persistence: RAW
  description: >
    Upload NGS reads in FASTQ format.
  input:
    - name: src1
      label: NGS upstream reads (FASTQ)
      type: basic:file
      description: >
        NGS reads in FASTQ format. Supported extensions: .fastq.gz (preferred), .fq.* or .fastq.*
      required: true
      validate_regex: '(\.(fastq|fq)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$'
    - name: src2
      label: NGS downstream reads (FASTQ)
      type: basic:file
      description: >
        NGS reads in FASTQ format. Supported extensions: .fastq.gz (preferred), .fq.* or .fastq.*
      required: true
      validate_regex: '(\.(fastq|fq)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$'
  output:
    - name: fastq
      label: Reads file (mate 1)
      type: basic:file
    - name: fastq2
      label: Reads file (mate 2)
      type: basic:file
    - name: number
      label: Number of reads
      type: basic:integer
    - name: bases
      label: Number of bases
      type: basic:string
    - name: fastqc_url
      label: Quality control with FastQC (Upstream)
      type: basic:url:view
    - name: fastqc_url2
      label: Quality control with FastQC (Downstream)
      type: basic:url:view
    - name: fastqc_archive
      label: Download FastQC archive (Upstream)
      type: basic:file
    - name: fastqc_archive2
      label: Download FastQC archive (Downstream)
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: '{{ src1.file|default:"?" }} (Upload)'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['reads', 'FASTQ']
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ src1.file|default:"?" }} reads upload.'
  var:
    - name: experiment
      label: Experiment
      type: basic:string
    - name: experimenter
      label: Experimenter
      type: basic:string
    - name: notes
      label: Notes
      type: basic:text
    - name: sample
      label: Biological sample
      group:
        - name: genotype
          label: Genotype
          type: basic:string
          default: "wildtype"
        - name: treatment
          label: Treatment
          type: basic:string
        - name: strain
          label: Strain
          type: basic:string
        - name: growth
          label: Growth
          type: basic:string
        - name: time
          label: Time point
          type: basic:integer
          default: 0
    - name: replicate
      label: Biological replicates
      group:
        - name: replicate
          label: Replicate
          type: basic:integer
          default: 1
    - name: seqrun
      label: Seq-Run information
      group:
        - name: adapter
          label: Adapter type
          type: basic:string
        - name: center
          label: Sequencing center
          type: basic:string
        - name: fragmenting
          label: Fragmenting
          type: basic:string
        - name: purified
          label: Purified band
          type: basic:string
    - name: rnaseq
      label: RNA-seq information
      group:
        - name: polya
          label: PolyA selection
          type: basic:string
        - name: primer
          label: Primer
          type: basic:string
    - name: chipseq
      label: ChIP-seq information
      group:
        - name: target
          label: Target protein
          type: basic:string
        - name: antibody
          label: Antibody
          type: basic:string
        - name: control
          label: Sample control
          type: basic:string
  run:
    runtime: polyglot
    bash: |
      gen-require common
      gen-require fastqc-0.11.3

      gen-import "{{ src1.file_temp|default:src1.file }}" "{{ src1.file }}" "fastq|fq|bz2" "fastq" 0.3 "extract"
      NAME1=$NAME

      gen-import "{{ src2.file_temp|default:src2.file }}" "{{ src2.file }}" "fastq|fq|bz2" "fastq" 0.6 "extract"
      NAME2=$NAME

      #detect and if old Illumina encoding is found transform to new format
      fastqFormatDetect.pl ${NAME}.fastq &> encoding.txt
      if [[ $(grep 'Solexa/Illumina1.3+/Illumina1.5+' "encoding.txt") ]]
      then
        sed -i -e '4~4y/@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghi/!"#$%&'\''()*+,-.\/0123456789:;<=>?@ABCDEFGHIJ/' "${NAME1}.fastq"
        sed -i -e '4~4y/@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghi/!"#$%&'\''()*+,-.\/0123456789:;<=>?@ABCDEFGHIJ/' "${NAME2}.fastq"
      fi

      gzip -c "${NAME1}.fastq" > "${NAME1}.fastq.gz"
      gzip -c "${NAME2}.fastq" > "${NAME2}.fastq.gz"
      gen-save-file fastq ${NAME1}.fastq.gz
      gen-save-file fastq2 ${NAME2}.fastq.gz

      echo "Postprocessing FastQC..."
      # http://www.bioinformatics.babraham.ac.uk/projects/fastqc/
      mkdir "fastqc" && fastqc "${NAME1}.fastq" "${NAME2}.fastq" --extract --outdir="fastqc" 2> stderr.txt
      gen-checkrc "Failed while processing with FastQC."
      if [[ $(grep --text "Failed to process file" stderr.txt) != "" ]]
      then
        gen-error "Failed while processing with FastQC."
      fi
      gen-progress 0.9

      FASTQC_URL="{\"name\":\"View\",\"url\":\"fastqc/${NAME1}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME1}_fastqc\"]}"
      FASTQC_URL2="{\"name\":\"View\",\"url\":\"fastqc/${NAME2}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME2}_fastqc\"]}"
      mv "fastqc/${NAME1}_fastqc.zip" .
      mv "fastqc/${NAME2}_fastqc.zip" .

      BASES=$(awk '/^Sequence length/ {print $3}' fastqc/*_fastqc/fastqc_data.txt | sed -n -e 'H;${x;s/\n/, /g;s/^,//;p;}')
      NUMBER=`sed -ne 's/^Total Sequences\s*\([0-9\.]\+\)\s*$/\1/pi' fastqc/*_fastqc/fastqc_data.txt | head -n 1`

      gen-save-file fastqc_archive ${NAME1}_fastqc.zip
      gen-save-file fastqc_archive2 ${NAME2}_fastqc.zip
      gen-save number $NUMBER
      gen-save bases "\"$BASES\""
      gen-save fastqc_url $FASTQC_URL
      gen-save fastqc_url2 $FASTQC_URL2


- name: import:upload:multiplexed
  version: 1.0.13
  label: Upload multiplexed NGS reads
  type: data:multiplexed:qseq:single
  category: upload
  persistence: RAW
  description: >
    Upload multiplexed NGS reds in QSEQ format.
  input:
    - name: reads
      label: Multiplexed NGS reads
      type: basic:file
      required: true
      validate_regex: '(\.(qseq)(|\.txt)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$'
      description: >
        NGS reads in QSeq format. Supported extensions: .qseq.txt.bz2 (preferred), .qseq.* or .qseq.txt.*.
    - name: barcodes
      label: NGS barcodes
      type: basic:file
      required: true
      validate_regex: '(\.(qseq)(|\.txt)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$'
      description: >
        Barcodes in QSeq format. Supported extensions: .qseq.txt.bz2 (preferred), .qseq.* or .qseq.txt.*.
    - name: annotation
      label: Barcode mapping
      type: basic:file
      validate_regex: '(\.csv|\.tsv)$'
      required: true
      description: >
        A tsv file mapping barcodes to experiment name, e.g. "TCGCAGG\tHr00".
  output:
    - name: qseq_reads
      label: Multiplexed NGS reads
      type: basic:file
    - name: qseq_reads2
      label: Multiplexed NGS reads (pair)
      type: basic:file
    - name: qseq_barcodes
      label: NGS barcodes
      type: basic:file
    - name: annotation
      label: Barcode mapping
      type: basic:file
    - name: matched
      label: Matched
      type: basic:string
    - name: notmatched
      label: Not matched
      type: basic:string
    - name: badquality
      label: Bad quality
      type: basic:string
    - name: skipped
      label: Skipped
      type: basic:string
  static:
    - name: name
      label: Name
      type: basic:string
      default: '{{ reads.file|default:"?" }} (Upload)'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['multiplexed', 'qseq']
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ reads.file|default:"?" }} multiplexed reads upload.'
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ barcodes.file_temp|default:barcodes.file }}" "{{ barcodes.file }}" "qseq.*" "qseq" 0.01 compress
      BARCODES_NAME=$NAME

      . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ reads.file_temp|default:reads.file }}" "{{ reads.file }}" "qseq.*" "qseq" 0.1 compress
      READS_NAME=$NAME

      TEMP="{{ annotation.file_temp|default:annotation.file }}"
      mv "$TEMP" {{ annotation.file }}
      echo "{\"proc.rc\":$?,\"annotation\":{\"file\":\"{{ annotation.file }}\", \"refs\":[\"temp\"]}}"

      . {{ proc.slugs_path }}/venv-gencloud-0.1/bin/activate
      python -u {{ proc.slugs_path }}/gencloud-20131109/demultiplex.py "${BARCODES_NAME}.qseq.gz" "${READS_NAME}.qseq.gz" -m "{{ annotation.file }}" --progress-start 0.2
      echo "{\"proc.progress\":1.0,\"proc.rc\":$?}"


- name: import:upload:multiplexed-paired-end
  version: 1.0.13
  label: Upload paired-end multiplexed NGS reads
  type: data:multiplexed:qseq:paired
  category: upload
  persistence: RAW
  description: >
    Upload multiplexed NGS reds in QSEQ format.
  input:
    - name: reads
      label: Multiplexed upstream reads
      type: basic:file
      required: true
      validate_regex: '((\.qseq|\.qseq\.txt)(\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$'
      description: >
        NGS reads in QSeq format. Supported extensions: .qseq.txt.bz2 (preferred), .qseq.* or .qseq.txt.*.
    - name: reads2
      label: Multiplexed downstream reads
      type: basic:file
      required: true
      validate_regex: '((\.qseq|\.qseq\.txt)(\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$'
      description: >
        NGS reads in QSeq format. Supported extensions: .qseq.txt.bz2 (preferred), .qseq.* or .qseq.txt.*.
    - name: barcodes
      label: NGS barcodes
      type: basic:file
      required: true
      validate_regex: '((\.qseq|\.qseq\.txt)(\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$'
      description: >
        Barcodes in QSeq format. Supported extensions: .qseq.txt.bz2 (preferred), .qseq.* or .qseq.txt.*.
    - name: annotation
      label: Barcode mapping
      type: basic:file
      validate_regex: '(\.csv|\.tsv)$'
      required: true
      description: >
        A tsv file mapping barcodes to experiment name, e.g. "TCGCAGG\tHr00".
  output:
    - name: qseq_reads
      label: Multiplexed upstream reads
      type: basic:file
    - name: qseq_reads2
      label: Multiplexed downstream reads
      type: basic:file
    - name: qseq_barcodes
      label: NGS barcodes
      type: basic:file
    - name: annotation
      label: Barcode mapping
      type: basic:file
    - name: matched
      label: Matched
      type: basic:string
    - name: notmatched
      label: Not matched
      type: basic:string
    - name: badquality
      label: Bad quality
      type: basic:string
    - name: skipped
      label: Skipped
      type: basic:string
  static:
    - name: name
      label: Name
      type: basic:string
      default: '{{ reads.file|default:"?" }} (Upload)'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['multiplexed', 'qseq']
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ reads.file|default:"?" }} multiplexed reads upload.'
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ barcodes.file_temp|default:barcodes.file }}" "{{ barcodes.file }}" "qseq.*" "qseq" 0.01 compress
      BARCODES_NAME=$NAME

      . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ reads.file_temp|default:reads.file }}" "{{ reads.file }}" "qseq.*" "qseq" 0.07 compress
      READS_NAME=$NAME

      . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ reads2.file_temp|default:reads2.file }}" "{{ reads2.file }}" "qseq.*" "qseq" 0.14 compress
      READS_NAME2=$NAME

      TEMP="{{ annotation.file_temp|default:annotation.file }}"
      mv "$TEMP" {{ annotation.file }}
      echo "{\"proc.rc\":$?,\"annotation\":{\"file\":\"{{ annotation.file }}\", \"refs\":[\"temp\"]}}"

      . {{ proc.slugs_path }}/venv-gencloud-0.1/bin/activate
      python -u {{ proc.slugs_path }}/gencloud-20131109/demultiplex.py "${BARCODES_NAME}.qseq.gz" -1 "${READS_NAME}.qseq.gz" -2 "${READS_NAME2}.qseq.gz" -m "{{ annotation.file }}" --progress-start 0.22
      echo "{\"proc.progress\":1.0,\"proc.rc\":$?}"


- name: import:upload:annotation-gff3
  version: 1.0.11
  label: Upload annotation (GFF3)
  type: data:annotation:gff3
  category: upload
  persistence: RAW
  description: >
    Upload annotation in GFF3 format.
  input:
    - name: src
      label: Annotation (GFF3)
      type: basic:file
      description: >
        Annotation in GFF3 format. Supported extensions are: .gff, .gff3 and .gtf
      required: true
      validate_regex: '\.(gff|gff3|gtf)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
  output:
    - name: gff
      label: Uploaded file
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: '{{ src.file }} (Upload)'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['annotation', 'GFF3']
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ src.file }} annotation upload.'
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "gff|gff3|gtf" "gff" 0.1

      {{ proc.slugs_path }}/genometools-1.5.3/bin/gt gff3validator ${NAME}.gff
      echo "{\"proc.progress\":0.2,\"proc.rc\":$?,\"gff\":{\"file\":\"${NAME}.gff\"}}"

      {{ proc.slugs_path }}/jbrowse-1.11.4/bin/flatfile-to-json.pl --gff "${NAME}.gff" --out . --trackLabel "gff-track"
      echo "{\"proc.progress\":1,\"proc.rc\":$?,\"gff\":{\"file\":\"${NAME}.gff\",\"refs\":[\"tracks/gff-track\"]}}"

      rm -f trackList.json tracks.conf


- name: import:upload:annotation-gtf
  version: 1.0.13
  label: Upload annotation (GTF2.2)
  type: data:annotation:gtf
  category: upload
  persistence: RAW
  description: >
    Upload annotation in GTF format.
  input:
    - name: src
      label: Annotation (GTF)
      type: basic:file
      description: >
        Annotation in GTF format.
      required: true
      validate_regex: '\.(gtf)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
  output:
    - name: gtf
      label: Uploaded file
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: '{{ src.file }} (Upload)'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['annotation', 'GTF']
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ src.file }} annotation upload.'
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "gtf" "gtf" 0.3

      echo "Converting GTF to GFF3:"
      cat ${NAME}.gtf | sed '/^##/d' > "${NAME}.tmp.gtf"
      python -u {{ proc.slugs_path }}/gencloud-20131109/xgtf2gff.py -p "UCSC" "${NAME}.tmp.gtf" "${NAME}.gff"

      echo "{\"proc.progress\":0.7}"
      echo "Preparing GFF3 file for JBrowse:"
      {{ proc.slugs_path }}/jbrowse-1.11.4/bin/flatfile-to-json.pl --gff "${NAME}.gff" --out . --trackLabel "gff-track"
      rm trackList.json tracks.conf "${NAME}.tmp.gtf"

      echo "{\"proc.progress\":1.0,\"proc.rc\":$?,\"gtf\":{\"file\":\"${NAME}.gtf\", \"refs\": [\"tracks/gff-track\"]}}"


- name: import:web:geneinfo:dictyostelium
  version: 1.0.5
  label: Import gene info from dictyBase
  type: data:geneinfo:dictyostelium
  category: import
  persistence: RAW
  description: >
    Import gene information (name, id and description) from dictyBase downloads.
  output:
    - name: src
      label: Gene information
      type: basic:file
    - name: date
      label: Download date
      type: basic:date
    - name: info
      label: Gene information JSON
      type: basic:json
  static:
    - name: name
      label: Name
      type: basic:string
      default: 'Gene information (dictyBase)'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['gene', 'information']
      placeholder: new tag
  run:
    runtime: polyglot
    bash: |
      wget -N -O "gene_information.txt" "http://www.dictybase.org/db/cgi-bin/dictyBase/download/download.pl?area=general&ID=gene_information.txt"
      echo "{\"src\":{\"file\":\"gene_information.txt\"},\"date\":\"`date +%Y-%m-%d`\",\"proc.progress\":0.1,\"proc.rc\":$?}"
      python -u {{ proc.slugs_path }}/gencloud-20131109/import_geneinfo.py "{{ proc.data_path }}/{{ proc.data_id }}/gene_information.txt"
      echo "{\"proc.progress\":1,\"proc.rc\":$?}"

- name: import:web:geneinfo:hsapiens
  version: 1.0.4
  label: Import gene info (H. sapiens - Ensembl)
  type: data:geneinfo:hsapiens
  category: import
  persistence: RAW
  description: >
    Import/build gene information based on ENSEMBL annotation.
  input:
    - name: ensembl_release
      label: Ensembl release
      type: basic:string
  output:
    - name: src
      label: Gene information
      type: basic:file
    - name: ensembl_release
      label: Ensembl release
      type: basic:string
    - name: date
      label: Download date
      type: basic:date
    - name: info
      label: Gene information JSON
      type: basic:json
  static:
    - name: name
      label: Name
      type: basic:string
      default: 'Gene information (H. sapiens)'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['gene', 'information']
      placeholder: new tag
  run:
    runtime: polyglot
    bash: |
      gen-require common

      ENSEMBL_RELEASE='{{ensembl_release}}'

      # Download Ensembl annotation file (GTF)
      wget -O "ensembl_annotation.gtf.gz" "ftp.ensembl.org/pub/release-${ENSEMBL_RELEASE}/gtf/homo_sapiens//Homo_sapiens.GRCh38.${ENSEMBL_RELEASE}.gtf.gz"
      gen-checkrc "Could not download ENSEMBL annotation file."
      gen-progress 0.1

      # Download NCBI annotation file
      wget -O "ncbi_gene_info.gz" "ftp.ncbi.nlm.nih.gov/gene/DATA/GENE_INFO/Mammalia/Homo_sapiens.gene_info.gz"
      gen-checkrc "Could not download NCBI gene-info file."
      gen-progress 0.2

      # Download UniprotKB mappings file
      wget -O "UniprotKB_id_mapping.tab.gz" "ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/idmapping//by_organism/HUMAN_9606_idmapping_selected.tab.gz"
      gen-checkrc "Could not download UniprotKB ID mapping file."
      gen-progress 0.3

      gzip -d ensembl_annotation.gtf.gz
      gzip -d ncbi_gene_info.gz
      gzip -d UniprotKB_id_mapping.tab.gz
      gen-progress 0.5

      # Build gene information
      build_gene_info_hsapiens.py --annotation ensembl_annotation.gtf --gene_info ncbi_gene_info --uniprotKB UniprotKB_id_mapping.tab --out hs_gene_info.tab
      gen-checkrc
      gen-progress 0.8

      # # Save gene info to JSON object
      # import_geneinfo.py hs_gene_info.tab
      # gen-checkrc
      # gen-progress 0.9

      gzip hs_gene_info.tab
      gen-save-file src hs_gene_info.tab.gz
      gen-save date `date +%Y-%m-%d`
      gen-save ensembl_release "\"${ENSEMBL_RELEASE}\""


- name: import:web:geneinfo:mus
  version: 1.0.4
  label: Import gene info (M. musculus - Ensembl)
  type: data:geneinfo:mus:ensembl
  category: import
  persistence: RAW
  description: >
    Import/build gene information based on ENSEMBL annotation.
  input:
    - name: ensembl_release
      label: Ensembl release
      type: basic:string
  output:
    - name: src
      label: Gene information
      type: basic:file
    - name: ensembl_release
      label: Ensembl release
      type: basic:string
    - name: date
      label: Download date
      type: basic:date
    - name: info
      label: Gene information JSON
      type: basic:json
  static:
    - name: name
      label: Name
      type: basic:string
      default: 'Gene information (M. musculus)'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['gene', 'information']
      placeholder: new tag
  run:
    runtime: polyglot
    bash: |
      gen-require common

      ENSEMBL_RELEASE='{{ensembl_release}}'

      # Download Ensembl annotation file (GTF)
      wget -O "ensembl_annotation.gtf.gz" "ftp.ensembl.org/pub/release-${ENSEMBL_RELEASE}/gtf/mus_musculus//Mus_musculus.GRCm38.${ENSEMBL_RELEASE}.gtf.gz"
      gen-checkrc "Could not download ENSEMBL annotation file."
      gen-progress 0.1

      # Download NCBI annotation file
      wget -O "ncbi_gene_info.gz" "ftp.ncbi.nlm.nih.gov/gene/DATA/GENE_INFO/Mammalia/Mus_musculus.gene_info.gz"
      gen-checkrc "Could not download NCBI gene-info file."
      gen-progress 0.2

      # Download UniprotKB mappings file
      wget -O "mgi_association_file.tab" "ftp://ftp.informatics.jax.org/pub/reports/MRK_ENSEMBL.rpt"
      gen-checkrc "Could not download MGI ID mapping file."
      gen-progress 0.3

      gzip -d ensembl_annotation.gtf.gz
      gzip -d ncbi_gene_info.gz
      gen-progress 0.5

      # Build gene information
      build_gene_info_mus.py --annotation ensembl_annotation.gtf --gene_info ncbi_gene_info --mgi mgi_association_file.tab --out mm_gene_info.tab
      gen-checkrc
      gen-progress 0.8

      # # Save gene info to JSON object
      # import_geneinfo.py mm_gene_info.tab
      # gen-checkrc
      # gen-progress 0.9

      gzip mm_gene_info.tab
      gen-save-file src mm_gene_info.tab.gz
      gen-save date `date +%Y-%m-%d`
      gen-save ensembl_release "\"${ENSEMBL_RELEASE}\""


- name: import:web:geneinfo:mm10
  version: 1.0.0
  label: Import gene info (M. musculus - mm10)
  type: data:geneinfo:mus
  category: import
  persistence: RAW
  description: >
    Import/build gene information based on mm10 annotation.
  input:
    - name: src
      label: Mouse mm10 annotation file (GTF)
      type: data:annotation:gtf
  output:
    - name: src
      label: Gene information
      type: basic:file
    - name: date
      label: Creation date
      type: basic:date
    - name: info
      label: Gene information JSON
      type: basic:json
  static:
    - name: name
      label: Name
      type: basic:string
      default: 'Gene information (M. musculus)'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['gene', 'information']
      placeholder: new tag
  run:
    runtime: polyglot
    bash: |
      gen-require common

      # Download NCBI annotation file
      wget -O "ncbi_gene_info.gz" "ftp.ncbi.nlm.nih.gov/gene/DATA/GENE_INFO/Mammalia/Mus_musculus.gene_info.gz"
      gen-checkrc "Could not download NCBI gene-info file."
      gen-progress 0.2

      gzip -d ncbi_gene_info.gz
      gen-progress 0.5

      # Build gene information
      build_gene_info_mm10.py --annotation {{ src.gtf.file }} --gene_info ncbi_gene_info --out mm10_gene_info.tab
      gen-checkrc
      gen-progress 0.8

      # # Save gene info to JSON object
      # import_geneinfo.py mm_gene_info.tab
      # gen-checkrc
      # gen-progress 0.9

      gzip mm10_gene_info.tab
      gen-save-file src mm10_gene_info.tab.gz
      gen-save date `date +%Y-%m-%d`


- name: import:upload:geneinfo
  version: 1.0.9
  label: Upload gene information
  type: data:geneinfo
  category: upload
  persistence: RAW
  description: >
    Upload gene information from text or Excel file.
  input:
    - name: src
      label: Gene information
      type: basic:file
      description: >
        Gene informations in tab-separated text file. Composition: first row is header follow by rows (Gene ID, Gene Name, Synonyms,  Gene products, Entrez ID, Ensembl ID, .. other (i.e. organism specific id)). Supported extensions: .tab, .txt.
      required: true
      validate_regex: '\.(tab|txt)$'
  output:
    - name: src
      label: Gene information
      type: basic:file
    - name: date
      label: Upload date
      type: basic:date
    - name: info
      label: Gene information JSON
      type: basic:json
  static:
    - name: name
      label: Name
      type: basic:string
      default: 'Gene information (upload)'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['gene', 'information']
      placeholder: new tag
  run:
    runtime: polyglot
    bash: |
      gen-require common
      gen-import "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "txt|tab" "tab" 0.3

      gen-save-file src ${NAME}.tab
      gen-save date `date +%Y-%m-%d`

      import_geneinfo.py "${NAME}.tab"
      gen-checkrc

- name: import:upload:mapping-bam
  version: 1.0.11
  label: Upload BAM file mapping
  type: data:alignment:bam:upload
  category: upload
  persistence: RAW
  description: >
    Upload a mapping file in BAM format.
  input:
    - name: src
      label: Mapping (BAM)
      type: basic:file
      description: >
        A mapping file in BAM format. The file will be indexed on upload, so additional BAI files are not required.
      required: true
      validate_regex: '\.(bam)$'
  output:
    - name: bam
      label: Uploaded file
      type: basic:file
    - name: bai
      label: Index BAI
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: '{{ src.file|default:"?" }} (Upload)'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['mapping', 'BAM']
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ src.file|default:"?" }} mapping upload.'
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
        . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "bam" "bam" 0.3 extract

        {{ proc.slugs_path }}/samtools-0.1.19/samtools index "${NAME}.bam" 2> stderr.txt
        indexrc=$?

        grep -Fq 'fail to index' stderr.txt
        indexerr=$?

        if [ -f "stderr.txt" ]; then
            cat stderr.txt
        fi

        # Position sort and re-index if indexing failed
        if [ $indexerr -eq 0 ] || [ $indexrc -ne 0 ]; then
            echo "SORTING input BAM file per coordinate:"
            {{ proc.slugs_path }}/samtools-0.1.19/samtools sort "${NAME}.bam" "${NAME}_aligned" >&2
            echo "{\"proc.progress\":0.4,\"proc.rc\":$?}"
            mv "${NAME}_aligned.bam" "${NAME}.bam"
            echo "{\"proc.rc\":$?}"
            echo "INDEXING input BAM file"
            {{ proc.slugs_path }}/samtools-0.1.19/samtools index "${NAME}.bam"
            echo "{\"proc.rc\":$?}"
        fi

        echo "{\"bam\":{\"file\":\"${NAME}.bam\"},\"bai\":{\"file\":\"${NAME}.bam.bai\"}}"


- name: import:upload:mapping-bam-indexed
  version: 1.0.6
  label: Upload BAM file and index
  type: data:alignment:bam:upload
  category: upload
  persistence: RAW
  description: >
    Upload a mapping file in BAM format with index.
  input:
    - name: src
      label: Mapping (BAM)
      type: basic:file
      description: >
        A mapping file in BAM format.
      required: true
      validate_regex: '\.(bam)$'
    - name: src2
      label: bam index (*.bam.bai file)
      type: basic:file
      description: >
        An index file of a BAM mapping file (ending with bam.bai).
      required: true
      validate_regex: '\.(bam.bai)$'
  output:
    - name: bam
      label: Uploaded file
      type: basic:file
    - name: bai
      label: Index BAI
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: '{{ src.file|default:"?" }} (Upload)'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['mapping', 'BAM']
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ src.file|default:"?" }} mapping upload.'
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
        . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "bam" "bam" 0.3 extract
        BAM_NAME=${NAME}.bam

        . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ src2.file_temp|default:src2.file }}" "{{ src2.file }}" "bai" "bai" 0.3 extract
        BAI_NAME=${NAME}.bai

        if [ "${BAM_NAME}.bai" = "${BAI_NAME}" ]; then
            echo "{\"bam\":{\"file\":\"${BAM_NAME}\"},\"bai\":{\"file\":\"${BAI_NAME}\"}}"
        else
            echo "{\"proc.error\":\"BAI should have the same name as BAM with .bai extension\"}"
        fi


- name: import:upload:variants-vcf
  version: 1.0.11
  label: Upload VCF variants
  type: data:variants:vcf
  category: upload
  persistence: RAW
  description: >
    Upload variants in VCF format.
  input:
    - name: src
      label: Variants (VCF)
      type: basic:file
      description: >
        Variants in VCF format.
      required: true
      validate_regex: '\.(vcf)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
  output:
    - name: vcf
      label: Uploaded file
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: '{{ src.file }} (Upload)'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['variants', 'VCF']
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ src.file }} variants upload.'
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "vcf" "vcf" 0.3

      {{proc.slugs_path}}/tabix-0.2.6/bgzip -c "${NAME}.vcf" > "${NAME}.vcf.bgz"
      {{proc.slugs_path}}/tabix-0.2.6/tabix -p vcf "${NAME}.vcf.bgz"

      echo "{\"proc.progress\":0.1,\"proc.rc\":$?,\"vcf\":{\"file\":\"${NAME}.vcf\",\"refs\":[\"${NAME}.vcf.bgz\",\"${NAME}.vcf.bgz.tbi\"]}}"


- name: import:upload:variants-bed
  version: 1.0.7
  label: Upload BED variants
  type: data:variants:bed
  category: upload
  persistence: RAW
  description: >
    Upload variants in BED format.
  input:
    - name: src
      label: Variants (BED)
      type: basic:file
      description: >
        Variants in BED format.
      required: true
      validate_regex: '\.(bed)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
  output:
    - name: bed
      label: Uploaded file
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: 'Upload variants (BED, {{ src.file }})'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['variants', 'BED']
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ src.file }} variants upload.'
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "bed" "bed" 1.0
      echo "{\"bed\":{\"file\":\"${NAME}.bed\"}}"


- name: import:upload:rmsk-annotation
  version: 1.0.9
  label: Upload RepeatMasker result file
  type: "data:annotation:gff3:"
  category: upload
  persistence: RAW
  description: >
    Upload RepeatMasker result file.
  input:
    - name: src
      label: RepeatMasker result file (.out)
      type: basic:file
      description: >
        RepeatMasker annotation file. Supported extensions: .out.gz, .txt.gz
      required: true
      validate_regex: '\.(out|txt)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
  output:
    - name: gff
      label: GFF3 annotations
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: 'Upload RepeatMasker annotation (GFF, {{ src.file }})'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['annotation', 'GFF3']
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ src.file }} RepeatMasker annotation upload.'
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "out|txt" "out" 0.1

      echo "Generating GFF3 file..."

      . {{ proc.slugs_path }}/venv-gencloud-0.1/bin/activate
      python -u {{ proc.slugs_path }}/gencloud-20131109/xrmsk.py --rmsk "${NAME}.out" > "${NAME}.gff"
      echo "{\"proc.progress\":0.5}"

      echo "Preparing GFF3 for JBrowse..."
      {{ proc.slugs_path }}/jbrowse-1.11.4/bin/flatfile-to-json.pl --gff "${NAME}.gff" --out . --trackLabel "gff-track"
      rm trackList.json tracks.conf
      echo "{\"proc.progress\":0.9}"

      {{ proc.slugs_path }}/genometools-1.5.3/bin/gt gff3validator ${NAME}.gff
      rm "${NAME}.out"
      echo "{\"proc.progress\":1.0,\"proc.rc\":$?,\"gff\":{\"file\":\"${NAME}.gff\", \"refs\": [\"tracks/gff-track\"]}}"


- name: import:upload:mappability-bigwig
  version: 1.0.9
  label: Upload mappability coverage (BigWig)
  type: data:bigwig:mappability
  category: upload
  persistence: RAW
  description: >
    Upload mappability coverage in BigWig format.
  input:
    - name: src
      label: Mappability coverage (BigWig)
      type: basic:file
      description: >
        Mappability coverage in BigWig format. Supported extensions are: .bw, .bigwig, .bigWig
      required: true
      validate_regex: '\.(bw|bigwig|bigWig)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
  output:
    - name: bigwig
      label: Uploaded file
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: 'Upload mappability coverage (BigWig, {{ src.file }})'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['mappability', 'BigWig']
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ src.file }} mappability coverage upload.'
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "bw|bigwig|bigWig" "bw" 0.1
      echo "{\"bigwig\":{\"file\":\"${NAME}.bw\"}}"


- name: import:upload:diffexp
  version: 1.0.2
  label: Upload Differential Expression table
  type: data:differentialexpression:upload
  category: upload
  persistence: RAW
  description: >
    Upload Differential Expression table.
  input:
    - name: src
      label: Differential expression file
      type: basic:file
      description: >
        Differential expression file. Supported file types: *.xls, *.xlsx, *.tab (tab-delimited file), *.diff. First column must contain gene/transcript IDs. DE file must include columns with log2(fold change) and FDR or pval information. DE file must contain header row with column names. Accepts DESeq, DESeq2, edgeR and CuffDiff output files.
      required: true
      validate_regex: '\.(xls|xlsx|tab|tab.gz|diff|diff.gz)$'
  output:
    - name: diffexp
      label: Differential expression
      type: basic:file
    - name: volcano_plot
      label: Volcano plot
      type: basic:json
  static:
    - name: name
      label: Name
      type: basic:string
      default: 'Upload differential expression ({{ src.file }})'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['differential expression']
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ src.file }} differential expression upload.'
    - name: vp_x_label
      label: Volcano plot x-label
      type: basic:string
      default: 'log2 FC'
    - name: vp_y_label
      label: Volcano plot y-label
      type: basic:string
      default: '-log10(FDR)'
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      gen-require common

      NAME='{{ src.file }}'

      if [[ '.{{ src.file }}' =~ \.(xls)$ ]]; then
        gen-import "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "xls" "xls" 0.3 extract
        convert_DE_excel_table.py '{{ src.file }}' > "${NAME}.tab"
        volcanoplot.py ${NAME}.tab
        gen-checkrc
        gen-progress 0.7
        gzip "${NAME}.tab"
      elif [[ '.{{ src.file }}' =~ \.(xlsx)$ ]]; then
        gen-import "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "xlsx" "xlsx" 0.3 extract
        convert_DE_excel_table.py '{{ src.file }}' > "${NAME}.tab"
        volcanoplot.py ${NAME}.tab
        gen-checkrc
        gen-progress 0.7
        gzip "${NAME}.tab"
      else
        gen-import "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "diff|tab|gz" "tab" 0.3 compress
        volcanoplot.py ${NAME}.tab.gz
        gen-checkrc
        gen-progress 0.7
      fi
      gen-save-file diffexp ${NAME}.tab.gz


- name: import:upload:ETC
  version: 1.0.5
  label: Upload Expression time course
  type: data:etc
  category: upload
  persistence: RAW
  description: >
    Upload Expression time course.
  input:
    - name: src
      label: Expression time course file (xls or tab)
      type: basic:file
      description: >
        Expression time course
      required: true
      validate_regex: '\.(xls|xlsx|tab)$'
  output:
    - name: etcfile
      label: Expression time course file
      type: basic:file
    - name: etc
      label: Expression time course
      type: basic:json
  static:
    - name: name
      label: Name
      type: basic:string
      default: "Expression time course"
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ["gene", "expression", "time", "course"]
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: "Description of gene expression time course."
    - name: jbrowse_tracks
      label: Associated JBrowse tracks
      type: list:data:jbrowse
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      NAME=`basename '{{ src.file }}'`
      TEMP='{{ proc.upload_path }}/{{ src.file_temp|default:src.file }}'

      mv "${TEMP}" "${NAME}"
      echo "{\"proc.progress\":0.2,\"proc.rc\":$?}"

      {{ proc.slugs_path }}/venv-gencloud-0.1/bin/python -u {{ proc.slugs_path }}/gencloud-20131109/importETC.py "${NAME}"
      str="{\"proc.progress\":1.0,\"proc.rc\":$?"
      if [ -f {{ proc.data_path }}/{{ proc.data_id }}/etc.json.gz ]
      then
        str=$str",\"etcfile\":{\"file\":\"etc.json.gz\"}"
      fi
      str=$str"}"
      echo $str


- name: import:upload:import_nucl_seq
  version: 1.0.7
  label: Upload nucleotide sequence(s) (FASTA)
  type: data:seq:nucleotide
  category: upload
  persistence: RAW
  description: >
    Upload sequence file in FASTA format.
  input:
    - name: src
      label: Sequence file (FASTA)
      type: basic:file
      description: >
        Sequence file (containing single or multiple sequences) in FASTA format. Supported extensions: .fasta.gz (preferred), .fa.*, .fna.* or .fasta.*
      required: true
      validate_regex: '\.(fasta|fa|fna)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
  output:
    - name: fasta
      label: Uploaded file
      type: basic:file
    - name: number
      label: Number of sequences
      type: basic:integer
      default: 'Sequence file ({{ src.file|default:"?" }})'
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['sequence', 'FASTA']
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ src.file|default:"?" }} sequence file.'
  static:
    - name: name
      label: Name
      type: basic:string
      default: '{{ src.file|default:"?" }} (Upload)'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      gen-require common
      gen-import "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "fasta|fa|fna" "fasta" 1.0 compress
      NUMBER=$(zcat ${NAME}.fasta.gz | grep -c "^>")
      gen-checkrc
      gen-save number ${NUMBER}
      gen-save-file fasta ${NAME}.fasta.gz


- name: import:upload:orthologues
  version: 1.0.6
  label: Upload gene orthologues file
  type: data:orthologues
  category: upload
  persistence: RAW
  description: >
        File (tab delimited .txt) containing gene orthologues relations information. Column one - primary organism gene IDs; column two - orthologues gene IDs.
  input:
    - name: src
      label: Gene orthologues file
      type: basic:file
      description: >
        Upload file (tab delimited .txt) containing gene orthologues relations information. Column one - primary organism gene IDs; column two - orthologues gene IDs.
      required: true
      validate_regex: '\.(txt)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
  output:
    - name: ort
      label: Gene information
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: 'Gene orthologues file ({{ src.file|default:"?" }}) upload'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['genes', 'orthologues']
      placeholder: new tag
  run:
    runtime: polyglot
    bash: |
      . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "txt|gz" "txt" 1.0
      python {{ proc.slugs_path }}/gencloud-20131109/verify_orthologues.py "${NAME}.txt"
      echo "{\"proc.rc\":$?,\"ort\":{\"file\":\"$NAME.txt.gz\"}}"

- name: import:upload:hmmer_database
  version: 1.0.1
  label: Upload HMMER database
  type: data:db:hmmer
  category: upload
  persistence: RAW
  description: >
    Upload hmmer database.
  input:
    - name: src
      label: HMMER database
      type: basic:file
      description: >
        Hmmer database. Supported extensions: .hmm (preferred), .hmm.gz, .hmm.bz2, .hmm.rar  hmm.zip
      required: true
      validate_regex: '\.(hmm)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
  output:
    - name: database
      label: Database
      type: basic:file
    - name: hmmerdb
      label: Database name
      type: basic:string
  static:
    - name: name
      label: Name
      type: basic:string
      default: '{{ src.file|default:"?" }}'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['Protein sequences', 'FASTA']
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: 'Description of {{ src.file|default:"?" }} protein BLAST database upload.'
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      NAME='{{ src.file }}'; NAME="${NAME%.*}"; NAME="${NAME%.*}"
      TEMP='{{ proc.upload_path }}/{{ src.file_temp|default:src.file }}'

      echo "Importing and extracting sequences..."
      shopt -s nocasematch >&2
      if [[ '.{{ src.file }}' =~ \.(hmm)\.gz$ ]]; then
        gzip -d -c "${TEMP}" > "${NAME}.hmm" && rm "${TEMP}" >&2
        echo "{\"proc.progress\":0.3}"
      elif [[ '.{{ src.file }}' =~ (\.(hmm)(\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$ ]]; then
        7z x -y -so "${TEMP}" > "${NAME}" && rm "${TEMP}.hmm" >&2
        echo "{\"proc.progress\":0.3}"
      elif [[ '.{{ src.file }}' =~ ^\.(hmm)(\.tgz|\.tar\.gz|\.tar\.bz2)$ ]]; then
        7z x -y -so "${TEMP}" | tar -xO > "${NAME}.hmm" && rm "${TEMP}" >&2
        echo "{\"proc.progress\":0.3}"
      else
        mv "${TEMP}" "${NAME}.hmm" >&2
      fi

      mkdir db
      mv "${NAME}.hmm" db/
      {{ proc.slugs_path }}/hmmer-3.1b1/binaries/hmmpress ./db/"${NAME}.hmm"

      echo "database representation file" > ${NAME}
      echo "{\"proc.progress\":0.9,\"proc.rc\":$?,\"database\":{\"file\":\"${NAME}\",\"refs\":[\"db\"]}, \"hmmerdb\":\"${NAME}.hmm\"}"


- name: import:upload:expression
  version: 1.0.3
  label: Upload Expression
  type: data:expression
  category: upload
  persistence: RAW
  description: >
        Upload expression data. Please provide raw expression data (read counts) and/or normalized expression data together with the associated data normalization type.
  input:
    - name: rc
      label: Read counts (raw expression)
      type: basic:file
      description: >
        Reads mapped to genomic features (raw count data). Supported extensions: .txt.gz (preferred), .tab.* or .txt.*
      required: false
      validate_regex: '\.(txt|tab|gz)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
    - name: exp
      label: Normalized expression
      type: basic:file
      description: >
        Normalized expression data. Supported extensions: .tab.gz (preferred) or .tab.*
      required: false
      validate_regex: '\.(tab|gz)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$'
    - name: exp_type
      label: Normalization type
      type: basic:string
      description: >
        Normalization type
      required: false
  output:
    - name: exp
      label: Normalized expression
      type: basic:file
      description: Normalized expression
    - name: rc
      label: Read counts
      type: basic:file
      description: Reads mapped to genomic features.
    - name: exp_json
      label: Expression (json)
      type: basic:json
    - name: exp_type
      label: Expression type
      type: basic:string
  static:
    - name: name
      label: Name
      type: basic:string
      default: 'Expression upload'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['expression', 'upload']
      placeholder: new tag
  run:
    runtime: polyglot
    bash: |

      {% if not exp and not rc %}
        echo "{\"proc.rc\":1}"

      {% elif exp and not exp_type %}
        echo "{\"proc.rc\":1}"

      {% elif not exp and exp_type and rc %}
        echo "{\"proc.rc\":1}"

      {% elif rc and not exp and not exp_type %}
        . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ rc.file_temp|default:rc.file }}" "{{ rc.file }}" "txt|tab|gz" "tab" 0.1 compress
        RC_NAME=${NAME}
        EXP_TYPE="RC"
        echo "{\"proc.rc\":$?,\"exp_type\":\"${EXP_TYPE}\",\"exp\":{\"file\":\"${RC_NAME}.tab.gz\"},\"rc\":{\"file\":\"${RC_NAME}.tab.gz\"}}"

      {% elif exp and exp_type and not rc %}
        . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ exp.file_temp|default:exp.file }}" "{{ exp.file }}" "tab|gz" "tab" 0.1 compress
        EXP_NAME=${NAME}

        EXP_TYPE="{{exp_type}}"

        python -u {{ proc.slugs_path }}/gencloud-20131109/expression2storage.py "${EXP_NAME}.tab.gz"
        echo "{\"proc.rc\":$?,\"exp_type\":\"${EXP_TYPE}\",\"exp\":{\"file\":\"${EXP_NAME}.tab.gz\"}}"

      {% else %}
        . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ rc.file_temp|default:rc.file }}" "{{ rc.file }}" "txt|tab|gz" "tab" 0.5 compress
        RC_NAME=${NAME}

        . {{proc.slugs_path}}/gencloud-20131109/import.sh "{{ exp.file_temp|default:exp.file }}" "{{ exp.file }}" "tab|gz" "tab" 0.9 compress
        EXP_NAME=${NAME}

        EXP_TYPE="{{exp_type}}"

        python -u {{ proc.slugs_path }}/gencloud-20131109/expression2storage.py "${EXP_NAME}.tab.gz"
        echo "{\"proc.rc\":$?,\"exp_type\":\"${EXP_TYPE}\",\"exp\":{\"file\":\"${EXP_NAME}.tab.gz\"},\"rc\":{\"file\":\"${RC_NAME}.tab.gz\"}}"

      {% endif %}

- name: import:upload:bed
  version: 1.0.2
  label: Upload BED track file
  type: data:bed
  category: upload
  persistence: RAW
  description: >
        Upload BED file annotation track.
  input:
    - name: src
      label: BED file
      type: basic:file
      description: >
        Upload BED file annotation track. The first three required BED fields are chrom, chromStart and chromEnd.
      required: true
      validate_regex: '\.(bed|narrowPeak)$'
  output:
    - name: BED
      label: BED file
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: 'BED file ({{ src.file|default:"?" }}) upload'
    - name: cite
      label: Citation
      type: list:basic:url:link
    - name: experiment
      label: Experiment
      type: basic:string
    - name: attachments
      label: Attachments
      type: list:basic:file
    - name: tags
      label: Tags
      type: list:basic:string
      default: ['BED']
      placeholder: new tag
  run:
    runtime: polyglot
    bash: |
      gen-require common
      gen-require bedops-2.4.14
      gen-import "{{ src.file_temp|default:src.file }}" "{{ src.file }}" "bed|narrowPeak" "bed" 1.0
      bedops --ec --everything "${NAME}.bed" 1> /dev/null
      gen-checkrc "BED file format validation failed. Check file integrity."
      gen-save-file BED "${NAME}.bed"
