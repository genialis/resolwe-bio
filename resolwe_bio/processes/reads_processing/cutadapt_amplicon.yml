- slug: cutadapt-amplicon
  name: Cutadapt (Amplicon)
  requirements:
    expression-engine: jinja
  data_name: "Cutadapt ({{ reads|sample_name|default('?') }})"
  version: 0.0.1
  type: data:reads:fastq:paired:cutadapt
  category: analyses
  flow_collection: sample
  persistence: CACHED
  description: >
    "Trimm 5' and 3' primers using Cutadapt"
  input:
    - name: reads
      label: NGS reads
      type: data:reads:fastq:paired
    - name: up_primers
      label: 5 prime primers
      type: data:seq:nucleotide
    - name: down_primers
      label: 3 prime primers
      type: data:seq:nucleotide
    - name: cputhreads
      label: CPU threads
      type: basic:integer
      default: 4
  output:
    - name: fastq
      label: Reads file (mate 1)
      type: list:basic:file
    - name: fastq2
      label: Reads file (mate 2)
      type: list:basic:file
    - name: fastqc_url
      label: Quality control with FastQC (Upstream)
      type: list:basic:file:html
    - name: fastqc_url2
      label: Quality control with FastQC (Downstream)
      type: list:basic:file:html
    - name: fastqc_archive
      label: Download FastQC archive (Upstream)
      type: list:basic:file
    - name: fastqc_archive2
      label: Download FastQC archive (Downstream)
      type: list:basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
        ptrim()
        {
            fqt1=$1
            fqt2=$2
            tprefix=${fqt1%%_R1.fastq}

            cutadapt -g file:5_primers.fasta -o ${tprefix}_tmpR1.fastq -p ${tprefix}_tmpR2.fastq $fqt1 $fqt2 --minimum-length 40 -e 0.12
            cutadapt -g file:5_primers.fasta -o ${tprefix}_5ptmpR2.fastq -p ${tprefix}_5ptmpR1.fastq ${tprefix}_tmpR2.fastq ${tprefix}_tmpR1.fastq --minimum-length 40 -e 0.12
            cutadapt -a file:3_primers.fasta -o ${tprefix}_tmp3R1.fastq -p ${tprefix}_tmp3R2.fastq ${tprefix}_5ptmpR1.fastq ${tprefix}_5ptmpR2.fastq --minimum-length 40 -e 0.12
            cutadapt -a file:3_primers.fasta -o ${tprefix}_R2_primertrimd.fastq -p ${tprefix}_R1_primertrimd.fastq ${tprefix}_tmp3R2.fastq ${tprefix}_tmp3R1.fastq --minimum-length 40 -e 0.12
        }

        r1reformat()
        {
            tr '~' '\n' < $1 > ${1}_R1.fastq
        }

        r2reformat()
        {
            tr '~' '\n' < $1 > ${1}_R2.fastq
        }

        export -f ptrim
        export -f r1reformat
        export -f r2reformat

        # get sample name
        SAMPLE_NAME='{{ reads|sample_name }}'

        # decompress primer files
        gzip -cd '{{up_primers.fasta.file}}' > 5_primers.fasta
        gzip -cd '{{down_primers.fasta.file}}' > 3_primers.fasta

        # concatenate and decompress fastq files
        NAME1=`basename '{{reads.fastq.0.file}}' .fastq.gz`
        NAME2=`basename '{{reads.fastq2.0.file}}' .fastq.gz`

        FW_READS="{{ reads.fastq|join(' ', attribute='file') }}"
        cat ${FW_READS} > ${NAME1}.fastq.gz

        RW_READS="{{ reads.fastq2|join(' ', attribute='file') }}"
        cat ${RW_READS} > ${NAME2}.fastq.gz

        gzip -cd ${NAME1}.fastq.gz > ${NAME1}.fastq
        gzip -cd ${NAME2}.fastq.gz > ${NAME2}.fastq

        # convert fastq format to one line per record for splitting
        paste - - - - < ${NAME1}.fastq | tr '\t' '~' > ${NAME1}.tmp
        paste - - - - < ${NAME2}.fastq | tr '\t' '~' > ${NAME2}.tmp

        # get number of fastq records in sample before converting back to fastq format
        l=$(wc -l ${NAME1}.tmp | awk '{print $1}')
        chunklinecnt=$(( $l / {{cputhreads}} ))

        # split re-formatted fastq files into chunks
        split -d -l $chunklinecnt ${NAME1}.tmp r1split
        split -d -l $chunklinecnt ${NAME2}.tmp r2split

        # convert each chunk back to fastq format
        parallel r1reformat ::: r1split*
        parallel r2reformat ::: r2split*

        ls r1split*.fastq > r1infiles
        ls r2split*.fastq > r2infiles

        # run parallel on paired chunks of fastq files with ptrim() function
        parallel --xapply ptrim {1} {2} ::: $(cat r1infiles) ::: $(cat r2infiles)

        # concatenate primer-trimmed fastq chunks
        cat *_R1_primertrimd.fastq > "${SAMPLE_NAME}_mate1_trimmed.fastq"
        cat *_R2_primertrimd.fastq > "${SAMPLE_NAME}_mate2_trimmed.fastq"

        # compress and save primer-trimmed fastq files
        gzip "${SAMPLE_NAME}_mate1_trimmed.fastq"
        gzip "${SAMPLE_NAME}_mate2_trimmed.fastq"

        re-save-file-list fastq "${SAMPLE_NAME}_mate1_trimmed.fastq.gz"
        re-save-file-list fastq2 "${SAMPLE_NAME}_mate2_trimmed.fastq.gz"

        # Run FastQC analysis
        mkdir "fastqc" && fastqc "${SAMPLE_NAME}_mate1_trimmed.fastq.gz" "${SAMPLE_NAME}_mate2_trimmed.fastq.gz" --extract --outdir="fastqc" >&2
        re-checkrc "Failed while processing with FastQC."
        re-progress 0.9

        mv "fastqc/${SAMPLE_NAME}_mate1_trimmed_fastqc.zip" "${SAMPLE_NAME}_mate1_trimmed_fastqc.zip"
        mv "fastqc/${SAMPLE_NAME}_mate2_trimmed_fastqc.zip" "${SAMPLE_NAME}_mate2_trimmed_fastqc.zip"

        FASTQC_URL="{\"file\":\"fastqc/${SAMPLE_NAME}_mate1_trimmed_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${SAMPLE_NAME}_mate1_trimmed_fastqc\"]}"
        FASTQC_URL2="{\"file\":\"fastqc/${SAMPLE_NAME}_mate2_trimmed_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${SAMPLE_NAME}_mate2_trimmed_fastqc\"]}"

        re-save-file-list fastqc_archive "${SAMPLE_NAME}_mate1_trimmed_fastqc.zip"
        re-save-file-list fastqc_archive2 "${SAMPLE_NAME}_mate2_trimmed_fastqc.zip"
        re-save-list fastqc_url $FASTQC_URL
        re-save-list fastqc_url2 $FASTQC_URL2
