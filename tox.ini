[tox]
envlist =
    py3{10,11}{,-partial},
    docs,
    linters,
    packaging,
    extra,
    migrations
skip_missing_interpreters = True
# This is the highest version of tox available on our test server.
minversion = 3.5.0
isolated_build = true
basepython = python3.11

[tox:jenkins]
# Set Tox's working directory using environment variable when run on Jenkins.
toxworkdir={env:TOX_WORKDIR}

# Configure special Tox environment used for isolated building of the source
# package.
[testenv:.package]
# Use the default Python 3 version available on the system.
# NOTE: This makes it portable to CI systems where only one particular Python 3
# version is installed.
basepython = python3.11

[testenv]
basepython =
    docs,linters,packaging,extra,migrations: python3.11
    py311: python3.11
    py310: python3.10
extras =
    docs: docs
    !docs: test
setenv =
    # Enable pylint to find modules in the tools package even if it is not
    # installed.
    linters: PYTHONPATH = {toxinidir}/resolwe_bio/tools
passenv =
    # Pass environment variables controlling project's tests.
    py3{10,11},migrations: RESOLWE_*,RESOLWEBIO_*,DOCKER_*,DJANGO_TEST_PROCESSES
allowlist_externals =
    migrations: bash
    migrations: psql
ignore_errors =
    !linters: false
    # Run all linters to see their output even if one of them fails.
    linters: true
skip_install =
    !extra: false
    # Extra tests don't need the package to be installed.
    extra: true

commands_pre =
    # Verify installed packages have compatible dependencies.
    # NOTE: Running 'pip check' after installation is necessary since pip
    # currently lacks dependency resolution which means it can silently create
    # broken installations.
    # For more details, see: https://github.com/pypa/pip/issues/988.
    pip check

commands =
    # General tests commands:
    # Run tests.
    py3{10,11}: python tests/manage.py test {env:TEST_SUITE:resolwe_bio} --noinput \
        # Only test changes against a given Git commit reference for *-partial
        # testing environments (default to "master" branch).
        py3{10,11}-partial: --only-changes-to \
        py3{10,11}-partial: {env:RESOLWE_TEST_ONLY_CHANGES_TO:master} \
        py3{10,11}-partial: --changes-file-types .resolwebio-filetypes.yml \
    py3{10,11}: --verbosity 2 --parallel

    # Docs commands:
    # Build documentation.
    docs: python setup.py build_sphinx --fresh-env --warning-is-error

    # Linter commands:
    # Check code formating with black.
    linters: black --check resolwe_bio .scripts
    # Check order of imports.
    linters: isort --check-only --diff resolwe_bio .scripts
    # Run PyFlakes and Ned Batchelder's McCabe script.
    linters: flake8 resolwe_bio .scripts
    # Check documentation formatting (PEP 257).
    linters: pydocstyle resolwe_bio .scripts --match='(?!test[_s]).*\.py'

    # Packaging commands:
    # Confirm that items checked into git are in sdist.
    packaging: check-manifest
    # Verify package's metadata.
    packaging: python setup.py check --metadata --strict
    # Verify that long description will render correctly on PyPI.
    packaging: python setup.py bdist_wheel sdist --quiet \
    packaging:     --dist-dir {toxworkdir}/packaging-test-dist
    packaging: twine check {toxworkdir}/packaging-test-dist/*

    # Extra commnds:
    # Check that there are no large test files in resolwe_bio/tests/files.
    extra: python .scripts/check_large_files.py resolwe_bio/tests/files

    # Migrations commands:
    migrations: psql --username={env:RESOLWE_POSTGRESQL_USER:resolwe} \
    migrations:     --host={env:RESOLWE_POSTGRESQL_HOST:localhost} \
    migrations:     --port={env:RESOLWE_POSTGRESQL_PORT:5432} \
    migrations:     --command='CREATE DATABASE "'{env:RESOLWE_POSTGRESQL_NAME:resolwe-bio}'"'
    migrations: python tests/manage.py migrate
    migrations: bash -c '[[ $(./tests/manage.py makemigrations --dry-run) = '\
    migrations:     '"No changes detected" ]] || exit 1'
